
stm32f103c8tx_HAL_st7920_u8g2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .font.u8g2_font_ncenB14_tr 0000084d  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000003  08003b09  08003b09  00013b09  2**0
                  ALLOC
  5 .ARM          00000000  08003b0c  08003b0c  0002000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  08003b0c  08003b0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  20000000  08003b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004b0  2000000c  08003b20  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  08003b20  000204bc  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b200  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002a3c  00000000  00000000  0005b235  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ba0  00000000  00000000  0005dc78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  0005e818  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016e81  00000000  00000000  0005f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009830  00000000  00000000  000760a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00088f32  00000000  00000000  0007f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00108803  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b4c  00000000  00000000  00108880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800322c 	.word	0x0800322c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800322c 	.word	0x0800322c

0800014c <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static u8g2_t u8g2;

void delay_us(uint32_t time) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t i = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]

	while (time--) {
 8000158:	e007      	b.n	800016a <delay_us+0x1e>
		i = 10;
 800015a:	230a      	movs	r3, #10
 800015c:	60fb      	str	r3, [r7, #12]
		while (i--)
 800015e:	bf00      	nop
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	1e5a      	subs	r2, r3, #1
 8000164:	60fa      	str	r2, [r7, #12]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d1fa      	bne.n	8000160 <delay_us+0x14>
	while (time--) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	1e5a      	subs	r2, r3, #1
 800016e:	607a      	str	r2, [r7, #4]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d1f2      	bne.n	800015a <delay_us+0xe>
			;
	}
}
 8000174:	bf00      	nop
 8000176:	3714      	adds	r7, #20
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
	...

08000180 <u8g2_gpio_and_delay_stm32>:
	}
}

uint8_t u8g2_gpio_and_delay_stm32(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	460b      	mov	r3, r1
 800018c:	72fb      	strb	r3, [r7, #11]
 800018e:	4613      	mov	r3, r2
 8000190:	72bb      	strb	r3, [r7, #10]
	GPIO_InitTypeDef gpioinitstruct;

	switch (msg) {
 8000192:	7afb      	ldrb	r3, [r7, #11]
 8000194:	3b28      	subs	r3, #40	; 0x28
 8000196:	2b26      	cmp	r3, #38	; 0x26
 8000198:	f200 80c3 	bhi.w	8000322 <u8g2_gpio_and_delay_stm32+0x1a2>
 800019c:	a201      	add	r2, pc, #4	; (adr r2, 80001a4 <u8g2_gpio_and_delay_stm32+0x24>)
 800019e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a2:	bf00      	nop
 80001a4:	08000241 	.word	0x08000241
 80001a8:	08000285 	.word	0x08000285
 80001ac:	0800028f 	.word	0x0800028f
 80001b0:	08000297 	.word	0x08000297
 80001b4:	08000323 	.word	0x08000323
 80001b8:	08000323 	.word	0x08000323
 80001bc:	08000323 	.word	0x08000323
 80001c0:	08000323 	.word	0x08000323
 80001c4:	08000323 	.word	0x08000323
 80001c8:	08000323 	.word	0x08000323
 80001cc:	08000323 	.word	0x08000323
 80001d0:	08000323 	.word	0x08000323
 80001d4:	08000323 	.word	0x08000323
 80001d8:	08000323 	.word	0x08000323
 80001dc:	08000323 	.word	0x08000323
 80001e0:	08000323 	.word	0x08000323
 80001e4:	08000323 	.word	0x08000323
 80001e8:	08000323 	.word	0x08000323
 80001ec:	08000323 	.word	0x08000323
 80001f0:	08000323 	.word	0x08000323
 80001f4:	08000323 	.word	0x08000323
 80001f8:	08000323 	.word	0x08000323
 80001fc:	08000323 	.word	0x08000323
 8000200:	08000323 	.word	0x08000323
 8000204:	0800029b 	.word	0x0800029b
 8000208:	080002bd 	.word	0x080002bd
 800020c:	08000323 	.word	0x08000323
 8000210:	08000323 	.word	0x08000323
 8000214:	08000323 	.word	0x08000323
 8000218:	08000323 	.word	0x08000323
 800021c:	08000323 	.word	0x08000323
 8000220:	08000323 	.word	0x08000323
 8000224:	08000323 	.word	0x08000323
 8000228:	08000323 	.word	0x08000323
 800022c:	08000327 	.word	0x08000327
 8000230:	08000301 	.word	0x08000301
 8000234:	08000323 	.word	0x08000323
 8000238:	08000323 	.word	0x08000323
 800023c:	080002df 	.word	0x080002df

	//Function which implements a delay, arg_int contains the amount of ms
	case U8X8_MSG_GPIO_AND_DELAY_INIT:

		//__HAL_RCC_GPIOB_CLK_ENABLE();
		CONTROL_GPIO_CLK_ENABLE();
 8000240:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <u8g2_gpio_and_delay_stm32+0x1b4>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	4a3b      	ldr	r2, [pc, #236]	; (8000334 <u8g2_gpio_and_delay_stm32+0x1b4>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6193      	str	r3, [r2, #24]
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <u8g2_gpio_and_delay_stm32+0x1b4>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	f003 0308 	and.w	r3, r3, #8
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697b      	ldr	r3, [r7, #20]
		/* Configure the GPIO_LED pin */
		gpioinitstruct.Pin = GPIO_PIN_12 | GPIO_PIN_11 | GPIO_PIN_10
 8000258:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800025c:	61bb      	str	r3, [r7, #24]
				| GPIO_PIN_9;
		gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025e:	2301      	movs	r3, #1
 8000260:	61fb      	str	r3, [r7, #28]
		gpioinitstruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	623b      	str	r3, [r7, #32]
		gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000266:	2303      	movs	r3, #3
 8000268:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	4619      	mov	r1, r3
 8000270:	4831      	ldr	r0, [pc, #196]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 8000272:	f000 fb8f 	bl	8000994 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(LED_GPIO_PORT,
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800027c:	482e      	ldr	r0, [pc, #184]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 800027e:	f000 fce3 	bl	8000c48 <HAL_GPIO_WritePin>
		GPIO_PIN_12 | GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9, GPIO_PIN_SET);

		break;
 8000282:	e051      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
		//Function which implements a delay, arg_int contains the amount of ms
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000284:	7abb      	ldrb	r3, [r7, #10]
 8000286:	4618      	mov	r0, r3
 8000288:	f000 fa7e 	bl	8000788 <HAL_Delay>
		break;
 800028c:	e04c      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
		//Function which delays 10us
	case U8X8_MSG_DELAY_10MICRO:
		delay_us(10);
 800028e:	200a      	movs	r0, #10
 8000290:	f7ff ff5c 	bl	800014c <delay_us>
		break;
 8000294:	e048      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
		//Function which delays 100ns
	case U8X8_MSG_DELAY_100NANO:
		__NOP();
 8000296:	bf00      	nop

		break;
 8000298:	e046      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
		//Function to define the logic level of the clockline
	case U8X8_MSG_GPIO_SPI_CLOCK:
		if (arg_int)
 800029a:	7abb      	ldrb	r3, [r7, #10]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d006      	beq.n	80002ae <u8g2_gpio_and_delay_stm32+0x12e>
			LCD_SCLK_1;
 80002a0:	2201      	movs	r2, #1
 80002a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002a6:	4824      	ldr	r0, [pc, #144]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002a8:	f000 fcce 	bl	8000c48 <HAL_GPIO_WritePin>
		else
			LCD_SCLK_0;

		break;
 80002ac:	e03c      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
			LCD_SCLK_0;
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b4:	4820      	ldr	r0, [pc, #128]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002b6:	f000 fcc7 	bl	8000c48 <HAL_GPIO_WritePin>
		break;
 80002ba:	e035      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
		//Function to define the logic level of the data line to the display
	case U8X8_MSG_GPIO_SPI_DATA:
		if (arg_int)
 80002bc:	7abb      	ldrb	r3, [r7, #10]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <u8g2_gpio_and_delay_stm32+0x150>
			LCD_SID_1;
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c8:	481b      	ldr	r0, [pc, #108]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002ca:	f000 fcbd 	bl	8000c48 <HAL_GPIO_WritePin>
		else
			LCD_SID_0;

		break;
 80002ce:	e02b      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
			LCD_SID_0;
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d6:	4818      	ldr	r0, [pc, #96]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002d8:	f000 fcb6 	bl	8000c48 <HAL_GPIO_WritePin>
		break;
 80002dc:	e024      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>

		// Function to define the logic level of the CS line
	case U8X8_MSG_GPIO_CS1:
		if (arg_int)
 80002de:	7abb      	ldrb	r3, [r7, #10]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d006      	beq.n	80002f2 <u8g2_gpio_and_delay_stm32+0x172>
			LCD_RS_1;
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ea:	4813      	ldr	r0, [pc, #76]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002ec:	f000 fcac 	bl	8000c48 <HAL_GPIO_WritePin>
		else
			LCD_RS_0;

		break;
 80002f0:	e01a      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
			LCD_RS_0;
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f8:	480f      	ldr	r0, [pc, #60]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 80002fa:	f000 fca5 	bl	8000c48 <HAL_GPIO_WritePin>
		break;
 80002fe:	e013      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
	case U8X8_MSG_GPIO_DC:

		break;
		//Function to define the logic level of the RESET line
	case U8X8_MSG_GPIO_RESET:
		if (arg_int)
 8000300:	7abb      	ldrb	r3, [r7, #10]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <u8g2_gpio_and_delay_stm32+0x194>
			LCD_RST_1;
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030c:	480a      	ldr	r0, [pc, #40]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 800030e:	f000 fc9b 	bl	8000c48 <HAL_GPIO_WritePin>
		else
			LCD_RST_0;

		break;
 8000312:	e009      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>
			LCD_RST_0;
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <u8g2_gpio_and_delay_stm32+0x1b8>)
 800031c:	f000 fc94 	bl	8000c48 <HAL_GPIO_WritePin>
		break;
 8000320:	e002      	b.n	8000328 <u8g2_gpio_and_delay_stm32+0x1a8>

	default:
		return 0; //A message was received which is not implemented, return 0 to indicate an error
 8000322:	2300      	movs	r3, #0
 8000324:	e001      	b.n	800032a <u8g2_gpio_and_delay_stm32+0x1aa>
		break;
 8000326:	bf00      	nop
	}

	return 1; // command processed successfully.
 8000328:	2301      	movs	r3, #1
}
 800032a:	4618      	mov	r0, r3
 800032c:	3728      	adds	r7, #40	; 0x28
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40010c00 	.word	0x40010c00

0800033c <BSP_LED_Init>:

void BSP_LED_Init(void) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioinitstruct;

	/* Enable the GPIO_LED Clock */
	LED_GPIO_CLK_ENABLE();
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <BSP_LED_Init+0x58>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a13      	ldr	r2, [pc, #76]	; (8000394 <BSP_LED_Init+0x58>)
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <BSP_LED_Init+0x58>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0308 	and.w	r3, r3, #8
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

	/* Configure the GPIO_LED pin */
	gpioinitstruct.Pin = LED1_PIN | LED2_PIN;
 800035a:	23c0      	movs	r3, #192	; 0xc0
 800035c:	60bb      	str	r3, [r7, #8]
	gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
	gpioinitstruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
	gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000366:	2303      	movs	r3, #3
 8000368:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(LED_GPIO_PORT, &gpioinitstruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <BSP_LED_Init+0x5c>)
 8000372:	f000 fb0f 	bl	8000994 <HAL_GPIO_Init>

	/* Reset PIN to switch off the LED */
	HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	4807      	ldr	r0, [pc, #28]	; (8000398 <BSP_LED_Init+0x5c>)
 800037c:	f000 fc64 	bl	8000c48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <BSP_LED_Init+0x5c>)
 8000386:	f000 fc5f 	bl	8000c48 <HAL_GPIO_WritePin>
}
 800038a:	bf00      	nop
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40010c00 	.word	0x40010c00

0800039c <BSP_LED1_Toggle>:

void BSP_LED1_Off(void) {
	HAL_GPIO_WritePin(LED_GPIO_PORT, LED1_PIN, GPIO_PIN_RESET);
}

void BSP_LED1_Toggle(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_PORT, LED1_PIN);
 80003a0:	2140      	movs	r1, #64	; 0x40
 80003a2:	4802      	ldr	r0, [pc, #8]	; (80003ac <BSP_LED1_Toggle+0x10>)
 80003a4:	f000 fc68 	bl	8000c78 <HAL_GPIO_TogglePin>
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010c00 	.word	0x40010c00

080003b0 <BSP_LED2_Toggle>:

void BSP_LED2_Off(void) {
	HAL_GPIO_WritePin(LED_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
}

void BSP_LED2_Toggle(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_PORT, LED2_PIN);
 80003b4:	2180      	movs	r1, #128	; 0x80
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <BSP_LED2_Toggle+0x10>)
 80003b8:	f000 fc5e 	bl	8000c78 <HAL_GPIO_TogglePin>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ca:	f000 f97b 	bl	80006c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003ce:	f000 f883 	bl	80004d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003d2:	f000 f8c7 	bl	8000564 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	/* Configure LED */
	BSP_LED_Init();
 80003d6:	f7ff ffb1 	bl	800033c <BSP_LED_Init>
	u8g2_Setup_st7920_s_128x64_f(&u8g2, U8G2_R0, u8x8_byte_4wire_sw_spi,
 80003da:	4b39      	ldr	r3, [pc, #228]	; (80004c0 <main+0xfc>)
 80003dc:	4a39      	ldr	r2, [pc, #228]	; (80004c4 <main+0x100>)
 80003de:	493a      	ldr	r1, [pc, #232]	; (80004c8 <main+0x104>)
 80003e0:	483a      	ldr	r0, [pc, #232]	; (80004cc <main+0x108>)
 80003e2:	f001 fa33 	bl	800184c <u8g2_Setup_st7920_s_128x64_f>
			u8g2_gpio_and_delay_stm32); // init u8g2 structure
	u8g2_InitDisplay(&u8g2);
 80003e6:	4839      	ldr	r0, [pc, #228]	; (80004cc <main+0x108>)
 80003e8:	f002 fe56 	bl	8003098 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80003ec:	2100      	movs	r1, #0
 80003ee:	4837      	ldr	r0, [pc, #220]	; (80004cc <main+0x108>)
 80003f0:	f002 fe61 	bl	80030b6 <u8x8_SetPowerSave>
	HAL_Delay(1000);
 80003f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003f8:	f000 f9c6 	bl	8000788 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(1000);
 80003fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000400:	f000 f9c2 	bl	8000788 <HAL_Delay>
		BSP_LED2_Toggle();
 8000404:	f7ff ffd4 	bl	80003b0 <BSP_LED2_Toggle>
		BSP_LED1_Toggle();
 8000408:	f7ff ffc8 	bl	800039c <BSP_LED1_Toggle>

		// Hello World
		u8g2_ClearBuffer(&u8g2);
 800040c:	482f      	ldr	r0, [pc, #188]	; (80004cc <main+0x108>)
 800040e:	f001 f86e 	bl	80014ee <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8000412:	492f      	ldr	r1, [pc, #188]	; (80004d0 <main+0x10c>)
 8000414:	482d      	ldr	r0, [pc, #180]	; (80004cc <main+0x108>)
 8000416:	f001 ff8b 	bl	8002330 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 15, "Hello World!");
 800041a:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <main+0x110>)
 800041c:	220f      	movs	r2, #15
 800041e:	2100      	movs	r1, #0
 8000420:	482a      	ldr	r0, [pc, #168]	; (80004cc <main+0x108>)
 8000422:	f001 fee7 	bl	80021f4 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8000426:	4829      	ldr	r0, [pc, #164]	; (80004cc <main+0x108>)
 8000428:	f001 f8d4 	bl	80015d4 <u8g2_SendBuffer>
		HAL_Delay(3000);
 800042c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000430:	f000 f9aa 	bl	8000788 <HAL_Delay>

		// Draw Box
		u8g2_ClearBuffer(&u8g2);
 8000434:	4825      	ldr	r0, [pc, #148]	; (80004cc <main+0x108>)
 8000436:	f001 f85a 	bl	80014ee <u8g2_ClearBuffer>
		u8g2_DrawBox(&u8g2, 10, 10, 108, 44);
 800043a:	232c      	movs	r3, #44	; 0x2c
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	236c      	movs	r3, #108	; 0x6c
 8000440:	220a      	movs	r2, #10
 8000442:	210a      	movs	r1, #10
 8000444:	4821      	ldr	r0, [pc, #132]	; (80004cc <main+0x108>)
 8000446:	f001 f81b 	bl	8001480 <u8g2_DrawBox>
		u8g2_SendBuffer(&u8g2);
 800044a:	4820      	ldr	r0, [pc, #128]	; (80004cc <main+0x108>)
 800044c:	f001 f8c2 	bl	80015d4 <u8g2_SendBuffer>
		HAL_Delay(3000);
 8000450:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000454:	f000 f998 	bl	8000788 <HAL_Delay>

		// Draw Circle
		u8g2_ClearBuffer(&u8g2);
 8000458:	481c      	ldr	r0, [pc, #112]	; (80004cc <main+0x108>)
 800045a:	f001 f848 	bl	80014ee <u8g2_ClearBuffer>
		u8g2_DrawCircle(&u8g2, 64, 32, 5, U8G2_DRAW_ALL);
 800045e:	230f      	movs	r3, #15
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2305      	movs	r3, #5
 8000464:	2220      	movs	r2, #32
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	4818      	ldr	r0, [pc, #96]	; (80004cc <main+0x108>)
 800046a:	f001 f9a6 	bl	80017ba <u8g2_DrawCircle>
		u8g2_DrawCircle(&u8g2, 64, 32, 10, U8G2_DRAW_ALL);
 800046e:	230f      	movs	r3, #15
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	230a      	movs	r3, #10
 8000474:	2220      	movs	r2, #32
 8000476:	2140      	movs	r1, #64	; 0x40
 8000478:	4814      	ldr	r0, [pc, #80]	; (80004cc <main+0x108>)
 800047a:	f001 f99e 	bl	80017ba <u8g2_DrawCircle>
		u8g2_DrawCircle(&u8g2, 64, 32, 15, U8G2_DRAW_ALL);
 800047e:	230f      	movs	r3, #15
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	230f      	movs	r3, #15
 8000484:	2220      	movs	r2, #32
 8000486:	2140      	movs	r1, #64	; 0x40
 8000488:	4810      	ldr	r0, [pc, #64]	; (80004cc <main+0x108>)
 800048a:	f001 f996 	bl	80017ba <u8g2_DrawCircle>
		u8g2_DrawCircle(&u8g2, 64, 32, 20, U8G2_DRAW_ALL);
 800048e:	230f      	movs	r3, #15
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2314      	movs	r3, #20
 8000494:	2220      	movs	r2, #32
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <main+0x108>)
 800049a:	f001 f98e 	bl	80017ba <u8g2_DrawCircle>
		u8g2_DrawCircle(&u8g2, 64, 32, 25, U8G2_DRAW_ALL);
 800049e:	230f      	movs	r3, #15
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2319      	movs	r3, #25
 80004a4:	2220      	movs	r2, #32
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4808      	ldr	r0, [pc, #32]	; (80004cc <main+0x108>)
 80004aa:	f001 f986 	bl	80017ba <u8g2_DrawCircle>
		u8g2_SendBuffer(&u8g2);
 80004ae:	4807      	ldr	r0, [pc, #28]	; (80004cc <main+0x108>)
 80004b0:	f001 f890 	bl	80015d4 <u8g2_SendBuffer>
		HAL_Delay(3000);
 80004b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004b8:	f000 f966 	bl	8000788 <HAL_Delay>
		HAL_Delay(1000);
 80004bc:	e79e      	b.n	80003fc <main+0x38>
 80004be:	bf00      	nop
 80004c0:	08000181 	.word	0x08000181
 80004c4:	08002a21 	.word	0x08002a21
 80004c8:	08003278 	.word	0x08003278
 80004cc:	20000028 	.word	0x20000028
 80004d0:	080032bc 	.word	0x080032bc
 80004d4:	08003244 	.word	0x08003244

080004d8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b090      	sub	sp, #64	; 0x40
 80004dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	2228      	movs	r2, #40	; 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fe98 	bl	800321c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000516:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800051a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800051c:	f107 0318 	add.w	r3, r7, #24
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fbc3 	bl	8000cac <HAL_RCC_OscConfig>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x58>
		Error_Handler();
 800052c:	f000 f83c 	bl	80005a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000530:	230f      	movs	r3, #15
 8000532:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000534:	2302      	movs	r3, #2
 8000536:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000540:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2102      	movs	r1, #2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fe2e 	bl	80011ac <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x82>
		Error_Handler();
 8000556:	f000 f827 	bl	80005a8 <Error_Handler>
	}
}
 800055a:	bf00      	nop
 800055c:	3740      	adds	r7, #64	; 0x40
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_GPIO_Init+0x40>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <MX_GPIO_Init+0x40>)
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_GPIO_Init+0x40>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0320 	and.w	r3, r3, #32
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_GPIO_Init+0x40>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <MX_GPIO_Init+0x40>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_GPIO_Init+0x40>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <HardFault_Handler+0x4>

0800062a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <MemManage_Handler+0x4>

08000630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <BusFault_Handler+0x4>

08000636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f874 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffe5 	bl	800066c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f002 fd97 	bl	80031d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fe8d 	bl	80003c4 <main>
  bx lr
 80006aa:	4770      	bx	lr
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b4:	08003b14 	.word	0x08003b14
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006bc:	200004bc 	.word	0x200004bc

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_Init+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <HAL_Init+0x28>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 f929 	bl	800092c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 f808 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e0:	f7ff ff68 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x54>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x58>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	fbb3 f3f1 	udiv	r3, r3, r1
 800070a:	fbb2 f3f3 	udiv	r3, r2, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f000 f933 	bl	800097a <HAL_SYSTICK_Config>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	e00e      	b.n	800073c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d80a      	bhi.n	800073a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f909 	bl	8000942 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_InitTick+0x5c>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	200004b8 	.word	0x200004b8

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200004b8 	.word	0x200004b8

08000788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000790:	f7ff fff0 	bl	8000774 <HAL_GetTick>
 8000794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007a0:	d005      	beq.n	80007ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_Delay+0x40>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4413      	add	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ae:	bf00      	nop
 80007b0:	f7ff ffe0 	bl	8000774 <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	68fa      	ldr	r2, [r7, #12]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d8f7      	bhi.n	80007b0 <HAL_Delay+0x28>
  {
  }
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000008 	.word	0x20000008

080007cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e8:	4013      	ands	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x44>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__NVIC_GetPriorityGrouping+0x18>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	f003 0307 	and.w	r3, r3, #7
}
 8000822:	4618      	mov	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	2b00      	cmp	r3, #0
 8000842:	db0a      	blt.n	800085a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	490c      	ldr	r1, [pc, #48]	; (800087c <__NVIC_SetPriority+0x4c>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	0112      	lsls	r2, r2, #4
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	440b      	add	r3, r1
 8000854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000858:	e00a      	b.n	8000870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <__NVIC_SetPriority+0x50>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 030f 	and.w	r3, r3, #15
 8000866:	3b04      	subs	r3, #4
 8000868:	0112      	lsls	r2, r2, #4
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	440b      	add	r3, r1
 800086e:	761a      	strb	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f1c3 0307 	rsb	r3, r3, #7
 800089e:	2b04      	cmp	r3, #4
 80008a0:	bf28      	it	cs
 80008a2:	2304      	movcs	r3, #4
 80008a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	3304      	adds	r3, #4
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d902      	bls.n	80008b4 <NVIC_EncodePriority+0x30>
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3b03      	subs	r3, #3
 80008b2:	e000      	b.n	80008b6 <NVIC_EncodePriority+0x32>
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b8:	f04f 32ff 	mov.w	r2, #4294967295
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	43da      	mvns	r2, r3
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43d9      	mvns	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008dc:	4313      	orrs	r3, r2
         );
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3724      	adds	r7, #36	; 0x24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008f8:	d301      	bcc.n	80008fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00f      	b.n	800091e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <SysTick_Config+0x40>)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3b01      	subs	r3, #1
 8000904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000906:	210f      	movs	r1, #15
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f7ff ff90 	bl	8000830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x40>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x40>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff49 	bl	80007cc <__NVIC_SetPriorityGrouping>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	4603      	mov	r3, r0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000954:	f7ff ff5e 	bl	8000814 <__NVIC_GetPriorityGrouping>
 8000958:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	6978      	ldr	r0, [r7, #20]
 8000960:	f7ff ff90 	bl	8000884 <NVIC_EncodePriority>
 8000964:	4602      	mov	r2, r0
 8000966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff5f 	bl	8000830 <__NVIC_SetPriority>
}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ffb0 	bl	80008e8 <SysTick_Config>
 8000988:	4603      	mov	r3, r0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b08b      	sub	sp, #44	; 0x2c
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a6:	e127      	b.n	8000bf8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a8:	2201      	movs	r2, #1
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	4013      	ands	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	f040 8116 	bne.w	8000bf2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b12      	cmp	r3, #18
 80009cc:	d034      	beq.n	8000a38 <HAL_GPIO_Init+0xa4>
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d80d      	bhi.n	80009ee <HAL_GPIO_Init+0x5a>
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d02b      	beq.n	8000a2e <HAL_GPIO_Init+0x9a>
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d804      	bhi.n	80009e4 <HAL_GPIO_Init+0x50>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d031      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d01c      	beq.n	8000a1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e2:	e048      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d043      	beq.n	8000a70 <HAL_GPIO_Init+0xdc>
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d01b      	beq.n	8000a24 <HAL_GPIO_Init+0x90>
          break;
 80009ec:	e043      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009ee:	4a89      	ldr	r2, [pc, #548]	; (8000c14 <HAL_GPIO_Init+0x280>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d026      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
 80009f4:	4a87      	ldr	r2, [pc, #540]	; (8000c14 <HAL_GPIO_Init+0x280>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d806      	bhi.n	8000a08 <HAL_GPIO_Init+0x74>
 80009fa:	4a87      	ldr	r2, [pc, #540]	; (8000c18 <HAL_GPIO_Init+0x284>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d020      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
 8000a00:	4a86      	ldr	r2, [pc, #536]	; (8000c1c <HAL_GPIO_Init+0x288>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d01d      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
          break;
 8000a06:	e036      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a08:	4a85      	ldr	r2, [pc, #532]	; (8000c20 <HAL_GPIO_Init+0x28c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d019      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
 8000a0e:	4a85      	ldr	r2, [pc, #532]	; (8000c24 <HAL_GPIO_Init+0x290>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d016      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
 8000a14:	4a84      	ldr	r2, [pc, #528]	; (8000c28 <HAL_GPIO_Init+0x294>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0xae>
          break;
 8000a1a:	e02c      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	623b      	str	r3, [r7, #32]
          break;
 8000a22:	e028      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	623b      	str	r3, [r7, #32]
          break;
 8000a2c:	e023      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	3308      	adds	r3, #8
 8000a34:	623b      	str	r3, [r7, #32]
          break;
 8000a36:	e01e      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	330c      	adds	r3, #12
 8000a3e:	623b      	str	r3, [r7, #32]
          break;
 8000a40:	e019      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e012      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d105      	bne.n	8000a64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	611a      	str	r2, [r3, #16]
          break;
 8000a62:	e008      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a64:	2308      	movs	r3, #8
 8000a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	615a      	str	r2, [r3, #20]
          break;
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	2bff      	cmp	r3, #255	; 0xff
 8000a7a:	d801      	bhi.n	8000a80 <HAL_GPIO_Init+0xec>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	e001      	b.n	8000a84 <HAL_GPIO_Init+0xf0>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d802      	bhi.n	8000a92 <HAL_GPIO_Init+0xfe>
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	e002      	b.n	8000a98 <HAL_GPIO_Init+0x104>
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	3b08      	subs	r3, #8
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	6a39      	ldr	r1, [r7, #32]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f000 8096 	beq.w	8000bf2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac6:	4b59      	ldr	r3, [pc, #356]	; (8000c2c <HAL_GPIO_Init+0x298>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a58      	ldr	r2, [pc, #352]	; (8000c2c <HAL_GPIO_Init+0x298>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b56      	ldr	r3, [pc, #344]	; (8000c2c <HAL_GPIO_Init+0x298>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ade:	4a54      	ldr	r2, [pc, #336]	; (8000c30 <HAL_GPIO_Init+0x29c>)
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	4013      	ands	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <HAL_GPIO_Init+0x2a0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0x19e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_GPIO_Init+0x2a4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00d      	beq.n	8000b2e <HAL_GPIO_Init+0x19a>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <HAL_GPIO_Init+0x2a8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x196>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <HAL_GPIO_Init+0x2ac>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_Init+0x192>
 8000b22:	2303      	movs	r3, #3
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x1a0>
 8000b26:	2304      	movs	r3, #4
 8000b28:	e004      	b.n	8000b34 <HAL_GPIO_Init+0x1a0>
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	e002      	b.n	8000b34 <HAL_GPIO_Init+0x1a0>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e000      	b.n	8000b34 <HAL_GPIO_Init+0x1a0>
 8000b32:	2300      	movs	r3, #0
 8000b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b36:	f002 0203 	and.w	r2, r2, #3
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	4093      	lsls	r3, r2
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b44:	493a      	ldr	r1, [pc, #232]	; (8000c30 <HAL_GPIO_Init+0x29c>)
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4938      	ldr	r1, [pc, #224]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
 8000b6a:	e006      	b.n	8000b7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	4933      	ldr	r1, [pc, #204]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b86:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	492e      	ldr	r1, [pc, #184]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	604b      	str	r3, [r1, #4]
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	4929      	ldr	r1, [pc, #164]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	4924      	ldr	r1, [pc, #144]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	608b      	str	r3, [r1, #8]
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	689a      	ldr	r2, [r3, #8]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	491f      	ldr	r1, [pc, #124]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d006      	beq.n	8000be4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	491a      	ldr	r1, [pc, #104]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60cb      	str	r3, [r1, #12]
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000be6:	68da      	ldr	r2, [r3, #12]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4915      	ldr	r1, [pc, #84]	; (8000c44 <HAL_GPIO_Init+0x2b0>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f aed0 	bne.w	80009a8 <HAL_GPIO_Init+0x14>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	372c      	adds	r7, #44	; 0x2c
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	10210000 	.word	0x10210000
 8000c18:	10110000 	.word	0x10110000
 8000c1c:	10120000 	.word	0x10120000
 8000c20:	10310000 	.word	0x10310000
 8000c24:	10320000 	.word	0x10320000
 8000c28:	10220000 	.word	0x10220000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40011400 	.word	0x40011400
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
 8000c54:	4613      	mov	r3, r2
 8000c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c58:	787b      	ldrb	r3, [r7, #1]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c64:	e003      	b.n	8000c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	041a      	lsls	r2, r3, #16
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43d9      	mvns	r1, r3
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	400b      	ands	r3, r1
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	611a      	str	r2, [r3, #16]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e26c      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 8087 	beq.w	8000dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ccc:	4b92      	ldr	r3, [pc, #584]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d00c      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	4b8f      	ldr	r3, [pc, #572]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 030c 	and.w	r3, r3, #12
 8000ce0:	2b08      	cmp	r3, #8
 8000ce2:	d112      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cf0:	d10b      	bne.n	8000d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf2:	4b89      	ldr	r3, [pc, #548]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d06c      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d168      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e246      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d12:	d106      	bne.n	8000d22 <HAL_RCC_OscConfig+0x76>
 8000d14:	4b80      	ldr	r3, [pc, #512]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a7f      	ldr	r2, [pc, #508]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e02e      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x98>
 8000d2a:	4b7b      	ldr	r3, [pc, #492]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a7a      	ldr	r2, [pc, #488]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a77      	ldr	r2, [pc, #476]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01d      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0xbc>
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a71      	ldr	r2, [pc, #452]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a6e      	ldr	r2, [pc, #440]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xd4>
 8000d68:	4b6b      	ldr	r3, [pc, #428]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a6a      	ldr	r2, [pc, #424]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a67      	ldr	r2, [pc, #412]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d88:	f7ff fcf4 	bl	8000774 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fcf0 	bl	8000774 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e1fa      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da2:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0xe4>
 8000dae:	e014      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fce0 	bl	8000774 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fcdc 	bl	8000774 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e1e6      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0x10c>
 8000dd6:	e000      	b.n	8000dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d063      	beq.n	8000eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de6:	4b4c      	ldr	r3, [pc, #304]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00b      	beq.n	8000e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000df2:	4b49      	ldr	r3, [pc, #292]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d11c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
 8000dfe:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d005      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d001      	beq.n	8000e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e1ba      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4939      	ldr	r1, [pc, #228]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	e03a      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d020      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e46:	f7ff fc95 	bl	8000774 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fc91 	bl	8000774 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e19b      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4927      	ldr	r1, [pc, #156]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	600b      	str	r3, [r1, #0]
 8000e80:	e015      	b.n	8000eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <HAL_RCC_OscConfig+0x270>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fc74 	bl	8000774 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc70 	bl	8000774 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e17a      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1f0      	bne.n	8000e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d03a      	beq.n	8000f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d019      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec8:	f7ff fc54 	bl	8000774 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fc50 	bl	8000774 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e15a      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f000 faa8 	bl	8001444 <RCC_Delay>
 8000ef4:	e01c      	b.n	8000f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_RCC_OscConfig+0x274>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efc:	f7ff fc3a 	bl	8000774 <HAL_GetTick>
 8000f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f02:	e00f      	b.n	8000f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f04:	f7ff fc36 	bl	8000774 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d908      	bls.n	8000f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e140      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	42420000 	.word	0x42420000
 8000f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f24:	4b9e      	ldr	r3, [pc, #632]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1e9      	bne.n	8000f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a6 	beq.w	800108a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f42:	4b97      	ldr	r3, [pc, #604]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10d      	bne.n	8000f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a93      	ldr	r2, [pc, #588]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b91      	ldr	r3, [pc, #580]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f66:	2301      	movs	r3, #1
 8000f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b8e      	ldr	r3, [pc, #568]	; (80011a4 <HAL_RCC_OscConfig+0x4f8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <HAL_RCC_OscConfig+0x4f8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a8a      	ldr	r2, [pc, #552]	; (80011a4 <HAL_RCC_OscConfig+0x4f8>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fbf7 	bl	8000774 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8a:	f7ff fbf3 	bl	8000774 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e0fd      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9c:	4b81      	ldr	r3, [pc, #516]	; (80011a4 <HAL_RCC_OscConfig+0x4f8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x312>
 8000fb0:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a7a      	ldr	r2, [pc, #488]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6213      	str	r3, [r2, #32]
 8000fbc:	e02d      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x334>
 8000fc6:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	4a75      	ldr	r2, [pc, #468]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	4a72      	ldr	r2, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6213      	str	r3, [r2, #32]
 8000fde:	e01c      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d10c      	bne.n	8001002 <HAL_RCC_OscConfig+0x356>
 8000fe8:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a69      	ldr	r2, [pc, #420]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	e00b      	b.n	800101a <HAL_RCC_OscConfig+0x36e>
 8001002:	4b67      	ldr	r3, [pc, #412]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a66      	ldr	r2, [pc, #408]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b64      	ldr	r3, [pc, #400]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a63      	ldr	r2, [pc, #396]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fba7 	bl	8000774 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800102a:	f7ff fba3 	bl	8000774 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f241 3288 	movw	r2, #5000	; 0x1388
 8001038:	4293      	cmp	r3, r2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e0ab      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001040:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0ee      	beq.n	800102a <HAL_RCC_OscConfig+0x37e>
 800104c:	e014      	b.n	8001078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fb91 	bl	8000774 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fb8d 	bl	8000774 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	; 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e095      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1ee      	bne.n	8001056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8081 	beq.w	8001196 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001094:	4b42      	ldr	r3, [pc, #264]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b08      	cmp	r3, #8
 800109e:	d061      	beq.n	8001164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d146      	bne.n	8001136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <HAL_RCC_OscConfig+0x4fc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb61 	bl	8000774 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fb5d 	bl	8000774 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e067      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c8:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f0      	bne.n	80010b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d108      	bne.n	80010f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010de:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	492d      	ldr	r1, [pc, #180]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a19      	ldr	r1, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	430b      	orrs	r3, r1
 8001102:	4927      	ldr	r1, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_RCC_OscConfig+0x4fc>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110e:	f7ff fb31 	bl	8000774 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001116:	f7ff fb2d 	bl	8000774 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e037      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f0      	beq.n	8001116 <HAL_RCC_OscConfig+0x46a>
 8001134:	e02f      	b.n	8001196 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <HAL_RCC_OscConfig+0x4fc>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fb1a 	bl	8000774 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff fb16 	bl	8000774 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e020      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0x498>
 8001162:	e018      	b.n	8001196 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e013      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	429a      	cmp	r2, r3
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	429a      	cmp	r2, r3
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40007000 	.word	0x40007000
 80011a8:	42420060 	.word	0x42420060

080011ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0d0      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d910      	bls.n	80011f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 0207 	bic.w	r2, r3, #7
 80011d6:	4965      	ldr	r1, [pc, #404]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4313      	orrs	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0b8      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001212:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800122a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	494d      	ldr	r1, [pc, #308]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	4313      	orrs	r3, r2
 800123c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d040      	beq.n	80012cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07f      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e073      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	4b3d      	ldr	r3, [pc, #244]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e06b      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 0203 	bic.w	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4936      	ldr	r1, [pc, #216]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800129c:	f7ff fa6a 	bl	8000774 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7ff fa66 	bl	8000774 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e053      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 020c 	and.w	r2, r3, #12
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1eb      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d210      	bcs.n	80012fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 0207 	bic.w	r2, r3, #7
 80012e2:	4922      	ldr	r1, [pc, #136]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e032      	b.n	8001362 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4916      	ldr	r1, [pc, #88]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800133a:	f000 f821 	bl	8001380 <HAL_RCC_GetSysClockFreq>
 800133e:	4601      	mov	r1, r0
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_RCC_ClockConfig+0x1c8>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	fa21 f303 	lsr.w	r3, r1, r3
 8001352:	4a09      	ldr	r2, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1cc>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_RCC_ClockConfig+0x1d0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f9c8 	bl	80006f0 <HAL_InitTick>

  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000
 8001370:	40021000 	.word	0x40021000
 8001374:	08003268 	.word	0x08003268
 8001378:	20000000 	.word	0x20000000
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001380:	b490      	push	{r4, r7}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001388:	1d3c      	adds	r4, r7, #4
 800138a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001390:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x40>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x46>
 80013be:	e02d      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013c2:	623b      	str	r3, [r7, #32]
      break;
 80013c4:	e02d      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013d2:	4413      	add	r3, r2
 80013d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d013      	beq.n	800140c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	0c5b      	lsrs	r3, r3, #17
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013f2:	4413      	add	r3, r2
 80013f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	4a0f      	ldr	r2, [pc, #60]	; (800143c <HAL_RCC_GetSysClockFreq+0xbc>)
 80013fe:	fb02 f203 	mul.w	r2, r2, r3
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e004      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	623b      	str	r3, [r7, #32]
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_RCC_GetSysClockFreq+0xbc>)
 800141e:	623b      	str	r3, [r7, #32]
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	6a3b      	ldr	r3, [r7, #32]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bc90      	pop	{r4, r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	08003254 	.word	0x08003254
 8001434:	08003264 	.word	0x08003264
 8001438:	40021000 	.word	0x40021000
 800143c:	007a1200 	.word	0x007a1200
 8001440:	003d0900 	.word	0x003d0900

08001444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <RCC_Delay+0x34>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <RCC_Delay+0x38>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0a5b      	lsrs	r3, r3, #9
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001460:	bf00      	nop
  }
  while (Delay --);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1e5a      	subs	r2, r3, #1
 8001466:	60fa      	str	r2, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f9      	bne.n	8001460 <RCC_Delay+0x1c>
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000000 	.word	0x20000000
 800147c:	10624dd3 	.word	0x10624dd3

08001480 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	4608      	mov	r0, r1
 800148a:	4611      	mov	r1, r2
 800148c:	461a      	mov	r2, r3
 800148e:	4603      	mov	r3, r0
 8001490:	70fb      	strb	r3, [r7, #3]
 8001492:	460b      	mov	r3, r1
 8001494:	70bb      	strb	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	4413      	add	r3, r2
 80014a0:	b2d8      	uxtb	r0, r3
 80014a2:	78ba      	ldrb	r2, [r7, #2]
 80014a4:	7c3b      	ldrb	r3, [r7, #16]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	78ba      	ldrb	r2, [r7, #2]
 80014ac:	78f9      	ldrb	r1, [r7, #3]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f8ce 	bl	8002654 <u8g2_IsIntersection>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d013      	beq.n	80014e6 <u8g2_DrawBox+0x66>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80014be:	e00e      	b.n	80014de <u8g2_DrawBox+0x5e>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80014c0:	7878      	ldrb	r0, [r7, #1]
 80014c2:	78ba      	ldrb	r2, [r7, #2]
 80014c4:	78f9      	ldrb	r1, [r7, #3]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4603      	mov	r3, r0
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 f83c 	bl	800254a <u8g2_DrawHVLine>
    y++;    
 80014d2:	78bb      	ldrb	r3, [r7, #2]
 80014d4:	3301      	adds	r3, #1
 80014d6:	70bb      	strb	r3, [r7, #2]
    h--;
 80014d8:	7c3b      	ldrb	r3, [r7, #16]
 80014da:	3b01      	subs	r3, #1
 80014dc:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 80014de:	7c3b      	ldrb	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ed      	bne.n	80014c0 <u8g2_DrawBox+0x40>
 80014e4:	e000      	b.n	80014e8 <u8g2_DrawBox+0x68>
    return;
 80014e6:	bf00      	nop
  }
}
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b084      	sub	sp, #16
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	7c1b      	ldrb	r3, [r3, #16]
 80014fc:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	fb02 f303 	mul.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fe7d 	bl	800321c <memset>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af02      	add	r7, sp, #8
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	70fb      	strb	r3, [r7, #3]
 8001536:	4613      	mov	r3, r2
 8001538:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	7c1b      	ldrb	r3, [r3, #16]
 8001540:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	b29b      	uxth	r3, r3
 8001550:	89ba      	ldrh	r2, [r7, #12]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001558:	89bb      	ldrh	r3, [r7, #12]
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800155e:	89bb      	ldrh	r3, [r7, #12]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	4413      	add	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001566:	7bf9      	ldrb	r1, [r7, #15]
 8001568:	78ba      	ldrb	r2, [r7, #2]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	460b      	mov	r3, r1
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f001 fd5f 	bl	8003036 <u8x8_DrawTile>
}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001592:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800159a:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	7c5b      	ldrb	r3, [r3, #17]
 80015a2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80015a4:	7bba      	ldrb	r2, [r7, #14]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4619      	mov	r1, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffbd 	bl	800152a <u8g2_send_tile_row>
    src_row++;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	7b7b      	ldrb	r3, [r7, #13]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d203      	bcs.n	80015cc <u8g2_send_buffer+0x4c>
 80015c4:	7bba      	ldrb	r2, [r7, #14]
 80015c6:	7b3b      	ldrb	r3, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3eb      	bcc.n	80015a4 <u8g2_send_buffer+0x24>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffcf 	bl	8001580 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fd78 	bl	80030d8 <u8x8_RefreshDisplay>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	4608      	mov	r0, r1
 80015fa:	4611      	mov	r1, r2
 80015fc:	461a      	mov	r2, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	70fb      	strb	r3, [r7, #3]
 8001602:	460b      	mov	r3, r1
 8001604:	70bb      	strb	r3, [r7, #2]
 8001606:	4613      	mov	r3, r2
 8001608:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800160a:	7d3b      	ldrb	r3, [r7, #20]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d017      	beq.n	8001644 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8001614:	787a      	ldrb	r2, [r7, #1]
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	4413      	add	r3, r2
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	7c3a      	ldrb	r2, [r7, #16]
 800161e:	78bb      	ldrb	r3, [r7, #2]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 ffae 	bl	8002588 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 800162c:	787a      	ldrb	r2, [r7, #1]
 800162e:	78bb      	ldrb	r3, [r7, #2]
 8001630:	4413      	add	r3, r2
 8001632:	b2d9      	uxtb	r1, r3
 8001634:	7c3a      	ldrb	r2, [r7, #16]
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 ffa2 	bl	8002588 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001644:	7d3b      	ldrb	r3, [r7, #20]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d017      	beq.n	800167e <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800164e:	787a      	ldrb	r2, [r7, #1]
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	7c3a      	ldrb	r2, [r7, #16]
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 ff91 	bl	8002588 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001666:	787a      	ldrb	r2, [r7, #1]
 8001668:	78bb      	ldrb	r3, [r7, #2]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b2d9      	uxtb	r1, r3
 800166e:	7c3a      	ldrb	r2, [r7, #16]
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 ff85 	bl	8002588 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d017      	beq.n	80016b8 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001688:	787a      	ldrb	r2, [r7, #1]
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	4413      	add	r3, r2
 800168e:	b2d9      	uxtb	r1, r3
 8001690:	7c3a      	ldrb	r2, [r7, #16]
 8001692:	78bb      	ldrb	r3, [r7, #2]
 8001694:	4413      	add	r3, r2
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 ff74 	bl	8002588 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80016a0:	787a      	ldrb	r2, [r7, #1]
 80016a2:	78bb      	ldrb	r3, [r7, #2]
 80016a4:	4413      	add	r3, r2
 80016a6:	b2d9      	uxtb	r1, r3
 80016a8:	7c3a      	ldrb	r2, [r7, #16]
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	4413      	add	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 ff68 	bl	8002588 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80016b8:	7d3b      	ldrb	r3, [r7, #20]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d017      	beq.n	80016f2 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80016c2:	787a      	ldrb	r2, [r7, #1]
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b2d9      	uxtb	r1, r3
 80016ca:	7c3a      	ldrb	r2, [r7, #16]
 80016cc:	78bb      	ldrb	r3, [r7, #2]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 ff57 	bl	8002588 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80016da:	787a      	ldrb	r2, [r7, #1]
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b2d9      	uxtb	r1, r3
 80016e2:	7c3a      	ldrb	r2, [r7, #16]
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	4413      	add	r3, r2
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 ff4b 	bl	8002588 <u8g2_DrawPixel>
    }
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af02      	add	r7, sp, #8
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	4608      	mov	r0, r1
 8001704:	4611      	mov	r1, r2
 8001706:	461a      	mov	r2, r3
 8001708:	4603      	mov	r3, r0
 800170a:	70fb      	strb	r3, [r7, #3]
 800170c:	460b      	mov	r3, r1
 800170e:	70bb      	strb	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	787b      	ldrb	r3, [r7, #1]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 800172a:	7b7a      	ldrb	r2, [r7, #13]
 800172c:	787b      	ldrb	r3, [r7, #1]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	737b      	strb	r3, [r7, #13]
    x = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	733b      	strb	r3, [r7, #12]
    y = rad;
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8001744:	78f8      	ldrb	r0, [r7, #3]
 8001746:	7afa      	ldrb	r2, [r7, #11]
 8001748:	7b39      	ldrb	r1, [r7, #12]
 800174a:	7e3b      	ldrb	r3, [r7, #24]
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4603      	mov	r3, r0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff4b 	bl	80015f0 <u8g2_draw_circle_section>
    
    while ( x < y )
 800175a:	e026      	b.n	80017aa <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0b      	blt.n	800177c <u8g2_draw_circle+0x82>
      {
        y--;
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	3b01      	subs	r3, #1
 8001768:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	3302      	adds	r3, #2
 800176e:	b2db      	uxtb	r3, r3
 8001770:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	7b7b      	ldrb	r3, [r7, #13]
 8001776:	4413      	add	r3, r2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800177c:	7b3b      	ldrb	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	3302      	adds	r3, #2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	7bbb      	ldrb	r3, [r7, #14]
 800178e:	4413      	add	r3, r2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8001794:	78f8      	ldrb	r0, [r7, #3]
 8001796:	7afa      	ldrb	r2, [r7, #11]
 8001798:	7b39      	ldrb	r1, [r7, #12]
 800179a:	7e3b      	ldrb	r3, [r7, #24]
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	4603      	mov	r3, r0
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff23 	bl	80015f0 <u8g2_draw_circle_section>
    while ( x < y )
 80017aa:	7b3a      	ldrb	r2, [r7, #12]
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d3d4      	bcc.n	800175c <u8g2_draw_circle+0x62>
    }
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80017ba:	b590      	push	{r4, r7, lr}
 80017bc:	b085      	sub	sp, #20
 80017be:	af02      	add	r7, sp, #8
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	4608      	mov	r0, r1
 80017c4:	4611      	mov	r1, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4603      	mov	r3, r0
 80017ca:	70fb      	strb	r3, [r7, #3]
 80017cc:	460b      	mov	r3, r1
 80017ce:	70bb      	strb	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	787b      	ldrb	r3, [r7, #1]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	b2d9      	uxtb	r1, r3
 80017dc:	78ba      	ldrb	r2, [r7, #2]
 80017de:	787b      	ldrb	r3, [r7, #1]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b2d8      	uxtb	r0, r3
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	787b      	ldrb	r3, [r7, #1]
 80017e8:	4413      	add	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2dc      	uxtb	r4, r3
 80017f0:	78ba      	ldrb	r2, [r7, #2]
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	4413      	add	r3, r2
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4623      	mov	r3, r4
 8001800:	4602      	mov	r2, r0
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 ff26 	bl	8002654 <u8g2_IsIntersection>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800180e:	7878      	ldrb	r0, [r7, #1]
 8001810:	78ba      	ldrb	r2, [r7, #2]
 8001812:	78f9      	ldrb	r1, [r7, #3]
 8001814:	7e3b      	ldrb	r3, [r7, #24]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	4603      	mov	r3, r0
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff6d 	bl	80016fa <u8g2_draw_circle>
 8001820:	e000      	b.n	8001824 <u8g2_DrawCircle+0x6a>
      return;
 8001822:	bf00      	nop
}
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
	...

0800182c <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2208      	movs	r2, #8
 8001838:	701a      	strb	r2, [r3, #0]
  return buf;
 800183a:	4b03      	ldr	r3, [pc, #12]	; (8001848 <u8g2_m_16_8_f+0x1c>)
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200000a8 	.word	0x200000a8

0800184c <u8g2_Setup_st7920_s_128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
}
/* st7920 f */
void u8g2_Setup_st7920_s_128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af02      	add	r7, sp, #8
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_st7920_128x64, u8x8_cad_st7920_spi, byte_cb, gpio_and_delay_cb);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <u8g2_Setup_st7920_s_128x64_f+0x44>)
 8001862:	490c      	ldr	r1, [pc, #48]	; (8001894 <u8g2_Setup_st7920_s_128x64_f+0x48>)
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f001 fc97 	bl	8003198 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800186a:	f107 0313 	add.w	r3, r7, #19
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ffdc 	bl	800182c <u8g2_m_16_8_f>
 8001874:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_horizontal_right_lsb, rotation);
 8001876:	7cfa      	ldrb	r2, [r7, #19]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <u8g2_Setup_st7920_s_128x64_f+0x4c>)
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 ff9b 	bl	80027bc <u8g2_SetupBuffer>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	08002cd1 	.word	0x08002cd1
 8001894:	08002f59 	.word	0x08002f59
 8001898:	080026ab 	.word	0x080026ab

0800189c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	81fb      	strh	r3, [r7, #14]
    font++;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80018de:	89fb      	ldrh	r3, [r7, #14]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	4413      	add	r3, r2
 80018ee:	81fb      	strh	r3, [r7, #14]
    return pos;
 80018f0:	89fb      	ldrh	r3, [r7, #14]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f7ff ffc7 	bl	800189c <u8g2_font_get_byte>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001916:	2101      	movs	r1, #1
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f7ff ffbf 	bl	800189c <u8g2_font_get_byte>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001926:	2102      	movs	r1, #2
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f7ff ffb7 	bl	800189c <u8g2_font_get_byte>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001936:	2103      	movs	r1, #3
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7ff ffaf 	bl	800189c <u8g2_font_get_byte>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001946:	2104      	movs	r1, #4
 8001948:	6838      	ldr	r0, [r7, #0]
 800194a:	f7ff ffa7 	bl	800189c <u8g2_font_get_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001956:	2105      	movs	r1, #5
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f7ff ff9f 	bl	800189c <u8g2_font_get_byte>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001966:	2106      	movs	r1, #6
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f7ff ff97 	bl	800189c <u8g2_font_get_byte>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001976:	2107      	movs	r1, #7
 8001978:	6838      	ldr	r0, [r7, #0]
 800197a:	f7ff ff8f 	bl	800189c <u8g2_font_get_byte>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001986:	2108      	movs	r1, #8
 8001988:	6838      	ldr	r0, [r7, #0]
 800198a:	f7ff ff87 	bl	800189c <u8g2_font_get_byte>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001996:	2109      	movs	r1, #9
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff ff7f 	bl	800189c <u8g2_font_get_byte>
 800199e:	4603      	mov	r3, r0
 80019a0:	b25a      	sxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80019a6:	210a      	movs	r1, #10
 80019a8:	6838      	ldr	r0, [r7, #0]
 80019aa:	f7ff ff77 	bl	800189c <u8g2_font_get_byte>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80019b6:	210b      	movs	r1, #11
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f7ff ff6f 	bl	800189c <u8g2_font_get_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b25a      	sxtb	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80019c6:	210c      	movs	r1, #12
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7ff ff67 	bl	800189c <u8g2_font_get_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	b25a      	sxtb	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80019d6:	210d      	movs	r1, #13
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	f7ff ff5f 	bl	800189c <u8g2_font_get_byte>
 80019de:	4603      	mov	r3, r0
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80019e6:	210e      	movs	r1, #14
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7ff ff57 	bl	800189c <u8g2_font_get_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80019f6:	210f      	movs	r1, #15
 80019f8:	6838      	ldr	r0, [r7, #0]
 80019fa:	f7ff ff4f 	bl	800189c <u8g2_font_get_byte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001a06:	2110      	movs	r1, #16
 8001a08:	6838      	ldr	r0, [r7, #0]
 8001a0a:	f7ff ff47 	bl	800189c <u8g2_font_get_byte>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001a16:	2111      	movs	r1, #17
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f7ff ff50 	bl	80018be <u8g2_font_get_word>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001a26:	2113      	movs	r1, #19
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f7ff ff48 	bl	80018be <u8g2_font_get_word>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001a36:	2115      	movs	r1, #21
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff ff40 	bl	80018be <u8g2_font_get_word>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	82da      	strh	r2, [r3, #22]
#endif
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7a9b      	ldrb	r3, [r3, #10]
 8001a5e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	fa42 f303 	asr.w	r3, r2, r3
 8001a70:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001a72:	7b7b      	ldrb	r3, [r7, #13]
 8001a74:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001a76:	7bba      	ldrb	r2, [r7, #14]
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001a7e:	7bbb      	ldrb	r3, [r7, #14]
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	d91a      	bls.n	8001aba <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001a84:	2308      	movs	r3, #8
 8001a86:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001a88:	7b3a      	ldrb	r2, [r7, #12]
 8001a8a:	7b7b      	ldrb	r3, [r7, #13]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	3b08      	subs	r3, #8
 8001ab8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4013      	ands	r3, r2
 8001ace:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7bba      	ldrb	r2, [r7, #14]
 8001ad4:	729a      	strb	r2, [r3, #10]
  return val;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	460b      	mov	r3, r1
 8001aec:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffab 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001b06:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	73fb      	strb	r3, [r7, #15]
  return v;
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001b28:	b490      	push	{r4, r7}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4604      	mov	r4, r0
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71bb      	strb	r3, [r7, #6]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	717b      	strb	r3, [r7, #5]
 8001b42:	4613      	mov	r3, r2
 8001b44:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001b46:	793b      	ldrb	r3, [r7, #4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d008      	beq.n	8001b5e <u8g2_add_vector_y+0x36>
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d00b      	beq.n	8001b68 <u8g2_add_vector_y+0x40>
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10e      	bne.n	8001b72 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8001b54:	797a      	ldrb	r2, [r7, #5]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4413      	add	r3, r2
 8001b5a:	71fb      	strb	r3, [r7, #7]
      break;
 8001b5c:	e00e      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 8001b5e:	79ba      	ldrb	r2, [r7, #6]
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4413      	add	r3, r2
 8001b64:	71fb      	strb	r3, [r7, #7]
      break;
 8001b66:	e009      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8001b68:	797b      	ldrb	r3, [r7, #5]
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	71fb      	strb	r3, [r7, #7]
      break;
 8001b70:	e004      	b.n	8001b7c <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	79fa      	ldrb	r2, [r7, #7]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	71fb      	strb	r3, [r7, #7]
      break;      
 8001b7a:	bf00      	nop
  }
  return dy;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc90      	pop	{r4, r7}
 8001b86:	4770      	bx	lr

08001b88 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001b88:	b490      	push	{r4, r7}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4608      	mov	r0, r1
 8001b92:	4611      	mov	r1, r2
 8001b94:	461a      	mov	r2, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	71fb      	strb	r3, [r7, #7]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	717b      	strb	r3, [r7, #5]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001ba6:	793b      	ldrb	r3, [r7, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d008      	beq.n	8001bbe <u8g2_add_vector_x+0x36>
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d00b      	beq.n	8001bc8 <u8g2_add_vector_x+0x40>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10e      	bne.n	8001bd2 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 8001bb4:	79ba      	ldrb	r2, [r7, #6]
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4413      	add	r3, r2
 8001bba:	71fb      	strb	r3, [r7, #7]
      break;
 8001bbc:	e00e      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 8001bbe:	797b      	ldrb	r3, [r7, #5]
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	71fb      	strb	r3, [r7, #7]
      break;
 8001bc6:	e009      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	71fb      	strb	r3, [r7, #7]
      break;
 8001bd0:	e004      	b.n	8001bdc <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 8001bd2:	797a      	ldrb	r2, [r7, #5]
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	71fb      	strb	r3, [r7, #7]
      break;      
 8001bda:	bf00      	nop
  }
  return dx;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc90      	pop	{r4, r7}
 8001be6:	4770      	bx	lr

08001be8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3350      	adds	r3, #80	; 0x50
 8001bfc:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001c08:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001c10:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c18:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	7d7b      	ldrb	r3, [r7, #21]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001c26:	7dfa      	ldrb	r2, [r7, #23]
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d201      	bcs.n	8001c32 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	795b      	ldrb	r3, [r3, #5]
 8001c3c:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001c3e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c42:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	7bb8      	ldrb	r0, [r7, #14]
 8001c4c:	f7ff ff9c 	bl	8001b88 <u8g2_add_vector_x>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001c54:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c58:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	7b9b      	ldrb	r3, [r3, #14]
 8001c60:	7b78      	ldrb	r0, [r7, #13]
 8001c62:	f7ff ff61 	bl	8001b28 <u8g2_add_vector_y>
 8001c66:	4603      	mov	r3, r0
 8001c68:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001c6a:	78bb      	ldrb	r3, [r7, #2]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00f      	beq.n	8001c90 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	7b1a      	ldrb	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	7b9b      	ldrb	r3, [r3, #14]
 8001c7e:	7db8      	ldrb	r0, [r7, #22]
 8001c80:	7b7a      	ldrb	r2, [r7, #13]
 8001c82:	7bb9      	ldrb	r1, [r7, #14]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4603      	mov	r3, r0
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fc5e 	bl	800254a <u8g2_DrawHVLine>
 8001c8e:	e012      	b.n	8001cb6 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	7adb      	ldrb	r3, [r3, #11]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10e      	bne.n	8001cb6 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	7b5a      	ldrb	r2, [r3, #13]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
      u8g2_DrawHVLine(u8g2, 
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	7b9b      	ldrb	r3, [r3, #14]
 8001ca6:	7db8      	ldrb	r0, [r7, #22]
 8001ca8:	7b7a      	ldrb	r2, [r7, #13]
 8001caa:	7bb9      	ldrb	r1, [r7, #14]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fc4a 	bl	800254a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001cb6:	7dfa      	ldrb	r2, [r7, #23]
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d309      	bcc.n	8001cd2 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001cbe:	7dfa      	ldrb	r2, [r7, #23]
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	757b      	strb	r3, [r7, #21]
    ly++;
 8001cca:	7d3b      	ldrb	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001cd0:	e79f      	b.n	8001c12 <u8g2_font_decode_len+0x2a>
      break;
 8001cd2:	bf00      	nop
  }
  lx += cnt;
 8001cd4:	7d7a      	ldrb	r2, [r7, #21]
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	4413      	add	r3, r2
 8001cda:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001cdc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001ce4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	71da      	strb	r2, [r3, #7]
  
}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3350      	adds	r3, #80	; 0x50
 8001d02:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001d16:	4619      	mov	r1, r3
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7ff fe98 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7ff fe8d 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b25a      	sxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7b1b      	ldrb	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	735a      	strb	r2, [r3, #13]
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3350      	adds	r3, #80	; 0x50
 8001d72:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffbc 	bl	8001cf4 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6938      	ldr	r0, [r7, #16]
 8001d8e:	f7ff fea8 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6938      	ldr	r0, [r7, #16]
 8001da0:	f7ff fe9f 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001da4:	4603      	mov	r3, r0
 8001da6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001dae:	4619      	mov	r1, r3
 8001db0:	6938      	ldr	r0, [r7, #16]
 8001db2:	f7ff fe96 	bl	8001ae2 <u8g2_font_decode_get_signed_bits>
 8001db6:	4603      	mov	r3, r0
 8001db8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f340 80cf 	ble.w	8001f64 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	7918      	ldrb	r0, [r3, #4]
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	7b7b      	ldrb	r3, [r7, #13]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	7b9b      	ldrb	r3, [r3, #14]
 8001ddc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001de0:	f7ff fed2 	bl	8001b88 <u8g2_add_vector_x>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	7958      	ldrb	r0, [r3, #5]
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	4413      	add	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	425b      	negs	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	b25a      	sxtb	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	7b9b      	ldrb	r3, [r3, #14]
 8001e02:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001e06:	f7ff fe8f 	bl	8001b28 <u8g2_add_vector_y>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	795b      	ldrb	r3, [r3, #5]
 8001e1c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001e22:	7d7b      	ldrb	r3, [r7, #21]
 8001e24:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	7b9b      	ldrb	r3, [r3, #14]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d852      	bhi.n	8001ed4 <u8g2_font_decode_glyph+0x170>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <u8g2_font_decode_glyph+0xd0>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e45 	.word	0x08001e45
 8001e38:	08001e5d 	.word	0x08001e5d
 8001e3c:	08001e81 	.word	0x08001e81
 8001e40:	08001eb1 	.word	0x08001eb1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	7dbb      	ldrb	r3, [r7, #22]
 8001e4e:	4413      	add	r3, r2
 8001e50:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001e52:	7bfa      	ldrb	r2, [r7, #15]
 8001e54:	7d3b      	ldrb	r3, [r7, #20]
 8001e56:	4413      	add	r3, r2
 8001e58:	753b      	strb	r3, [r7, #20]
	    break;
 8001e5a:	e03b      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	7dfa      	ldrb	r2, [r7, #23]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	7d3b      	ldrb	r3, [r7, #20]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	753b      	strb	r3, [r7, #20]
	    break;
 8001e7e:	e029      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	7dfa      	ldrb	r2, [r7, #23]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
 8001e90:	3301      	adds	r3, #1
 8001e92:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001e94:	7dbb      	ldrb	r3, [r7, #22]
 8001e96:	3301      	adds	r3, #1
 8001e98:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	7d7a      	ldrb	r2, [r7, #21]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ea2:	7d7b      	ldrb	r3, [r7, #21]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ea8:	7d3b      	ldrb	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001eae:	e011      	b.n	8001ed4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	7dbb      	ldrb	r3, [r7, #22]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	7d7a      	ldrb	r2, [r7, #21]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ec6:	7d7b      	ldrb	r3, [r7, #21]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001ecc:	7d3b      	ldrb	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001ed2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001ed4:	7db8      	ldrb	r0, [r7, #22]
 8001ed6:	7d7a      	ldrb	r2, [r7, #21]
 8001ed8:	7df9      	ldrb	r1, [r7, #23]
 8001eda:	7d3b      	ldrb	r3, [r7, #20]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fbb7 	bl	8002654 <u8g2_IsIntersection>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8001eec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001ef0:	e03a      	b.n	8001f68 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	2200      	movs	r2, #0
 8001efc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001f04:	4619      	mov	r1, r3
 8001f06:	6938      	ldr	r0, [r7, #16]
 8001f08:	f7ff fda1 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8001f16:	4619      	mov	r1, r3
 8001f18:	6938      	ldr	r0, [r7, #16]
 8001f1a:	f7ff fd98 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff fe5d 	bl	8001be8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001f2e:	7abb      	ldrb	r3, [r7, #10]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fe57 	bl	8001be8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6938      	ldr	r0, [r7, #16]
 8001f3e:	f7ff fd86 	bl	8001a4e <u8g2_font_decode_get_unsigned_bits>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ec      	bne.n	8001f22 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001f4e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dd00      	ble.n	8001f58 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001f56:	e7d2      	b.n	8001efe <u8g2_font_decode_glyph+0x19a>
	break;
 8001f58:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	7b1a      	ldrb	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
  return d;
 8001f64:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	60fb      	str	r3, [r7, #12]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3317      	adds	r3, #23
 8001f86:	60fb      	str	r3, [r7, #12]

  
  if ( encoding <= 255 )
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d82a      	bhi.n	8001fe4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	2b60      	cmp	r3, #96	; 0x60
 8001f92:	d907      	bls.n	8001fa4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	e009      	b.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d906      	bls.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <u8g2_font_get_glyph_data+0xc0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	887a      	ldrh	r2, [r7, #2]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d102      	bne.n	8001fd4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	e031      	b.n	8002038 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001fe2:	e7e9      	b.n	8001fb8 <u8g2_font_get_glyph_data+0x48>
	font = u8g2->last_font_data;
    }
    else
#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
    
    
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	817b      	strh	r3, [r7, #10]
      e <<= 8;
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	817b      	strh	r3, [r7, #10]
      e |= u8x8_pgm_read( font + 1 );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b29a      	uxth	r2, r3
 8002006:	897b      	ldrh	r3, [r7, #10]
 8002008:	4313      	orrs	r3, r2
 800200a:	817b      	strh	r3, [r7, #10]
#ifdef  __unix__
      if ( encoding < e )
        break;
#endif 

      if ( e == 0 )
 800200c:	897b      	ldrh	r3, [r7, #10]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <u8g2_font_get_glyph_data+0xc4>
	break;
  
      if ( e == encoding )
 8002012:	897a      	ldrh	r2, [r7, #10]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	429a      	cmp	r2, r3
 8002018:	d102      	bne.n	8002020 <u8g2_font_get_glyph_data+0xb0>
      {
#ifdef  __unix__
	u8g2->last_font_data = font;
	u8g2->last_unicode = encoding;
#endif 
	return font+3;	/* skip encoding and glyph size */
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3303      	adds	r3, #3
 800201e:	e00b      	b.n	8002038 <u8g2_font_get_glyph_data+0xc8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3302      	adds	r3, #2
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
      e = u8x8_pgm_read( font );
 800202e:	e7e0      	b.n	8001ff2 <u8g2_font_get_glyph_data+0x82>
	break;
 8002030:	bf00      	nop
 8002032:	e000      	b.n	8002036 <u8g2_font_get_glyph_data+0xc6>
	break;
 8002034:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	461a      	mov	r2, r3
 8002050:	4603      	mov	r3, r0
 8002052:	70fb      	strb	r3, [r7, #3]
 8002054:	460b      	mov	r3, r1
 8002056:	70bb      	strb	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  u8g2->font_decode.target_y = y;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	78ba      	ldrb	r2, [r7, #2]
 800206c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002070:	883b      	ldrh	r3, [r7, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff7b 	bl	8001f70 <u8g2_font_get_glyph_data>
 800207a:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fe6d 	bl	8001d64 <u8g2_font_decode_glyph>
 800208a:	4603      	mov	r3, r0
 800208c:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	70fb      	strb	r3, [r7, #3]
 80020aa:	460b      	mov	r3, r1
 80020ac:	70bb      	strb	r3, [r7, #2]
 80020ae:	4613      	mov	r3, r2
 80020b0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d833      	bhi.n	8002124 <u8g2_DrawGlyph+0x8c>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <u8g2_DrawGlyph+0x2c>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020e9 	.word	0x080020e9
 80020cc:	080020fd 	.word	0x080020fd
 80020d0:	08002111 	.word	0x08002111
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	78bb      	ldrb	r3, [r7, #2]
 80020e2:	4413      	add	r3, r2
 80020e4:	70bb      	strb	r3, [r7, #2]
      break;
 80020e6:	e01d      	b.n	8002124 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	70fb      	strb	r3, [r7, #3]
      break;
 80020fa:	e013      	b.n	8002124 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	78bb      	ldrb	r3, [r7, #2]
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	70bb      	strb	r3, [r7, #2]
      break;
 800210e:	e009      	b.n	8002124 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	4413      	add	r3, r2
 8002120:	70fb      	strb	r3, [r7, #3]
      break;
 8002122:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002124:	883b      	ldrh	r3, [r7, #0]
 8002126:	78ba      	ldrb	r2, [r7, #2]
 8002128:	78f9      	ldrb	r1, [r7, #3]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff89 	bl	8002042 <u8g2_font_draw_glyph>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	72fb      	strb	r3, [r7, #11]
 800214a:	4613      	mov	r3, r2
 800214c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fc1f 	bl	8002992 <u8x8_utf8_init>
  sum = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	4611      	mov	r1, r2
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	4798      	blx	r3
 8002166:	4603      	mov	r3, r0
 8002168:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800216a:	8abb      	ldrh	r3, [r7, #20]
 800216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002170:	4293      	cmp	r3, r2
 8002172:	d038      	beq.n	80021e6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800217a:	8abb      	ldrh	r3, [r7, #20]
 800217c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002180:	4293      	cmp	r3, r2
 8002182:	d0e9      	beq.n	8002158 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002184:	8abb      	ldrh	r3, [r7, #20]
 8002186:	7aba      	ldrb	r2, [r7, #10]
 8002188:	7af9      	ldrb	r1, [r7, #11]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff ff84 	bl	8002098 <u8g2_DrawGlyph>
 8002190:	4603      	mov	r3, r0
 8002192:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800219a:	2b03      	cmp	r3, #3
 800219c:	d81e      	bhi.n	80021dc <u8g2_draw_string+0xa0>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <u8g2_draw_string+0x68>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bf 	.word	0x080021bf
 80021ac:	080021c9 	.word	0x080021c9
 80021b0:	080021d3 	.word	0x080021d3
      {
	case 0:
	  x += delta;
 80021b4:	7afa      	ldrb	r2, [r7, #11]
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	4413      	add	r3, r2
 80021ba:	72fb      	strb	r3, [r7, #11]
	  break;
 80021bc:	e00e      	b.n	80021dc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80021be:	7aba      	ldrb	r2, [r7, #10]
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	4413      	add	r3, r2
 80021c4:	72bb      	strb	r3, [r7, #10]
	  break;
 80021c6:	e009      	b.n	80021dc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80021c8:	7afa      	ldrb	r2, [r7, #11]
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	72fb      	strb	r3, [r7, #11]
	  break;
 80021d0:	e004      	b.n	80021dc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80021d2:	7aba      	ldrb	r2, [r7, #10]
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	72bb      	strb	r3, [r7, #10]
	  break;
 80021da:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 80021dc:	7dfa      	ldrb	r2, [r7, #23]
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	4413      	add	r3, r2
 80021e2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021e4:	e7b8      	b.n	8002158 <u8g2_draw_string+0x1c>
      break;
 80021e6:	bf00      	nop
    }
  }
  return sum;
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop

080021f4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	72fb      	strb	r3, [r7, #11]
 8002202:	4613      	mov	r3, r2
 8002204:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <u8g2_DrawStr+0x30>)
 800220a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800220c:	7aba      	ldrb	r2, [r7, #10]
 800220e:	7af9      	ldrb	r1, [r7, #11]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ff92 	bl	800213c <u8g2_draw_string>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	080029ad 	.word	0x080029ad

08002228 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05d      	beq.n	80022f4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f993 206d 	ldrsb.w	r2, [r3, #109]	; 0x6d
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f993 206e 	ldrsb.w	r2, [r3, #110]	; 0x6e
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04d      	beq.n	80022f6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002260:	2b01      	cmp	r3, #1
 8002262:	d11c      	bne.n	800229e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f993 306f 	ldrsb.w	r3, [r3, #111]	; 0x6f
 8002270:	429a      	cmp	r2, r3
 8002272:	da05      	bge.n	8002280 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f993 206f 	ldrsb.w	r2, [r3, #111]	; 0x6f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 800228c:	429a      	cmp	r2, r3
 800228e:	dd32      	ble.n	80022f6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f993 2070 	ldrsb.w	r2, [r3, #112]	; 0x70
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800229c:	e02b      	b.n	80022f6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f993 3079 	ldrsb.w	r3, [r3, #121]	; 0x79
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80022ac:	4619      	mov	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80022b4:	440b      	add	r3, r1
 80022b6:	429a      	cmp	r2, r3
 80022b8:	da0d      	bge.n	80022d6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	b25a      	sxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f993 207a 	ldrsb.w	r2, [r3, #122]	; 0x7a
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dd07      	ble.n	80022f6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f993 206c 	ldrsb.w	r2, [r3, #108]	; 0x6c
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 80022f2:	e000      	b.n	80022f6 <u8g2_UpdateRefHeight+0xce>
    return;
 80022f4:	bf00      	nop
  }  
}
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
	...

08002314 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a03      	ldr	r2, [pc, #12]	; (800232c <u8g2_SetFontPosBaseline+0x18>)
 8002320:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	080022ff 	.word	0x080022ff

08002330 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d00b      	beq.n	800235c <u8g2_SetFont+0x2c>
  {
#ifdef  __unix__
	u8g2->last_font_data = NULL;
	u8g2->last_unicode = 0x0ffff;
#endif 
    u8g2->font = font;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	649a      	str	r2, [r3, #72]	; 0x48
    u8g2_read_font_info(&(u8g2->font_info), font);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3360      	adds	r3, #96	; 0x60
 800234e:	6839      	ldr	r1, [r7, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fad3 	bl	80018fc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ff66 	bl	8002228 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <u8g2_clip_intersection>:

  optimized clipping: c is set to 0
*/
//static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t c, u8g2_uint_t d)
static uint8_t u8g2_clip_intersection(u8g2_uint_t *ap, u8g2_uint_t *bp, u8g2_uint_t d)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	71fb      	strb	r3, [r7, #7]
  u8g2_uint_t a = *ap;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b = *bp;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800237e:	7dfa      	ldrb	r2, [r7, #23]
 8002380:	7dbb      	ldrb	r3, [r7, #22]
 8002382:	429a      	cmp	r2, r3
 8002384:	d911      	bls.n	80023aa <u8g2_clip_intersection+0x46>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002386:	7dfa      	ldrb	r2, [r7, #23]
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	429a      	cmp	r2, r3
 800238c:	d208      	bcs.n	80023a0 <u8g2_clip_intersection+0x3c>
    {
      b = d;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	75bb      	strb	r3, [r7, #22]
      b--;
 8002392:	7dbb      	ldrb	r3, [r7, #22]
 8002394:	3b01      	subs	r3, #1
 8002396:	75bb      	strb	r3, [r7, #22]
      *bp = b;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	7dba      	ldrb	r2, [r7, #22]
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e004      	b.n	80023aa <u8g2_clip_intersection+0x46>
    }
    else
    {
      a = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	75fb      	strb	r3, [r7, #23]
      *ap = a;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	7dfa      	ldrb	r2, [r7, #23]
 80023a8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80023aa:	7dfa      	ldrb	r2, [r7, #23]
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d301      	bcc.n	80023b6 <u8g2_clip_intersection+0x52>
    return 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e00c      	b.n	80023d0 <u8g2_clip_intersection+0x6c>
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
 80023b6:	7dbb      	ldrb	r3, [r7, #22]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <u8g2_clip_intersection+0x5c>
    return 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	e007      	b.n	80023d0 <u8g2_clip_intersection+0x6c>
  //if ( a < c )		// never true with c == 0
  //  *ap = c;
  if ( b > d )
 80023c0:	7dba      	ldrb	r2, [r7, #22]
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d902      	bls.n	80023ce <u8g2_clip_intersection+0x6a>
    *bp = d;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	79fa      	ldrb	r2, [r7, #7]
 80023cc:	701a      	strb	r2, [r3, #0]
    
  return 1;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023da:	b5b0      	push	{r4, r5, r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af02      	add	r7, sp, #8
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	4608      	mov	r0, r1
 80023e4:	4611      	mov	r1, r2
 80023e6:	461a      	mov	r2, r3
 80023e8:	4603      	mov	r3, r0
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70bb      	strb	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  h = u8g2->pixel_buf_height;		// this must be the real buffer height
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 403b 	ldrb.w	r4, [r3, #59]	; 0x3b
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 503a 	ldrb.w	r5, [r3, #58]	; 0x3a


  if ( dir == 0 )
 8002400:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11a      	bne.n	800243e <u8g2_draw_hv_line_2dir+0x64>
  {
    if ( y >= h )
 8002408:	78bb      	ldrb	r3, [r7, #2]
 800240a:	429c      	cmp	r4, r3
 800240c:	d93d      	bls.n	800248a <u8g2_draw_hv_line_2dir+0xb0>
      return;
    a = x;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	73fb      	strb	r3, [r7, #15]
    a += len;
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	4413      	add	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
 800241c:	f107 010f 	add.w	r1, r7, #15
 8002420:	1cfb      	adds	r3, r7, #3
 8002422:	462a      	mov	r2, r5
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff9d 	bl	8002364 <u8g2_clip_intersection>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02e      	beq.n	800248e <u8g2_draw_hv_line_2dir+0xb4>
      return;
    len = a;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	707b      	strb	r3, [r7, #1]
    len -= x;
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	787a      	ldrb	r2, [r7, #1]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	707b      	strb	r3, [r7, #1]
 800243c:	e019      	b.n	8002472 <u8g2_draw_hv_line_2dir+0x98>
  }
  else
  {
    if ( x >= w )
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	429d      	cmp	r5, r3
 8002442:	d926      	bls.n	8002492 <u8g2_draw_hv_line_2dir+0xb8>
      return;
    a = y;
 8002444:	78bb      	ldrb	r3, [r7, #2]
 8002446:	73fb      	strb	r3, [r7, #15]
    a += len;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	787b      	ldrb	r3, [r7, #1]
 800244c:	4413      	add	r3, r2
 800244e:	b2db      	uxtb	r3, r3
 8002450:	73fb      	strb	r3, [r7, #15]
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
 8002452:	f107 010f 	add.w	r1, r7, #15
 8002456:	1cbb      	adds	r3, r7, #2
 8002458:	4622      	mov	r2, r4
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff82 	bl	8002364 <u8g2_clip_intersection>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d017      	beq.n	8002496 <u8g2_draw_hv_line_2dir+0xbc>
      return;
    len = a;
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	707b      	strb	r3, [r7, #1]
    len -= y;
 800246a:	78bb      	ldrb	r3, [r7, #2]
 800246c:	787a      	ldrb	r2, [r7, #1]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	707b      	strb	r3, [r7, #1]
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002476:	78f9      	ldrb	r1, [r7, #3]
 8002478:	78ba      	ldrb	r2, [r7, #2]
 800247a:	7878      	ldrb	r0, [r7, #1]
 800247c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4603      	mov	r3, r0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	47a0      	blx	r4
 8002488:	e006      	b.n	8002498 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800248a:	bf00      	nop
 800248c:	e004      	b.n	8002498 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 800248e:	bf00      	nop
 8002490:	e002      	b.n	8002498 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8002492:	bf00      	nop
 8002494:	e000      	b.n	8002498 <u8g2_draw_hv_line_2dir+0xbe>
      return;
 8002496:	bf00      	nop
}
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bdb0      	pop	{r4, r5, r7, pc}

0800249e <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800249e:	b590      	push	{r4, r7, lr}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af02      	add	r7, sp, #8
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	4608      	mov	r0, r1
 80024a8:	4611      	mov	r1, r2
 80024aa:	461a      	mov	r2, r3
 80024ac:	4603      	mov	r3, r0
 80024ae:	70fb      	strb	r3, [r7, #3]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70bb      	strb	r3, [r7, #2]
 80024b4:	4613      	mov	r3, r2
 80024b6:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_HVLINE_COUNT
  u8g2->hv_cnt++;
#endif /* U8G2_WITH_HVLINE_COUNT */   

  /* transform to pixel buffer coordinates */
   y -= u8g2->tile_curr_row*8;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	78ba      	ldrb	r2, [r7, #2]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	70bb      	strb	r3, [r7, #2]

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d116      	bne.n	80024fc <u8g2_draw_hv_line_4dir+0x5e>
  {
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d233      	bcs.n	8002542 <u8g2_draw_hv_line_4dir+0xa4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80024e0:	78ba      	ldrb	r2, [r7, #2]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d22d      	bcs.n	8002542 <u8g2_draw_hv_line_4dir+0xa4>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80024ea:	7878      	ldrb	r0, [r7, #1]
 80024ec:	78ba      	ldrb	r2, [r7, #2]
 80024ee:	78f9      	ldrb	r1, [r7, #3]
 80024f0:	7e3b      	ldrb	r3, [r7, #24]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	4603      	mov	r3, r0
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	47a0      	blx	r4
    return;
 80024fa:	e022      	b.n	8002542 <u8g2_draw_hv_line_4dir+0xa4>
  }
#endif
  
  if ( dir == 2 )
 80024fc:	7e3b      	ldrb	r3, [r7, #24]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <u8g2_draw_hv_line_4dir+0x74>
  {
    x -= len;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	70fb      	strb	r3, [r7, #3]
    x++;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	3301      	adds	r3, #1
 800250e:	70fb      	strb	r3, [r7, #3]
 8002510:	e009      	b.n	8002526 <u8g2_draw_hv_line_4dir+0x88>
  }
  else if ( dir == 3 )
 8002512:	7e3b      	ldrb	r3, [r7, #24]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d106      	bne.n	8002526 <u8g2_draw_hv_line_4dir+0x88>
  {
    y -= len;
 8002518:	78ba      	ldrb	r2, [r7, #2]
 800251a:	787b      	ldrb	r3, [r7, #1]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	70bb      	strb	r3, [r7, #2]
    y++;
 8002520:	78bb      	ldrb	r3, [r7, #2]
 8002522:	3301      	adds	r3, #1
 8002524:	70bb      	strb	r3, [r7, #2]
  }
  dir &= 1;  
 8002526:	7e3b      	ldrb	r3, [r7, #24]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	763b      	strb	r3, [r7, #24]
#ifdef U8G2_WITH_CLIPPING
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800252e:	7878      	ldrb	r0, [r7, #1]
 8002530:	78ba      	ldrb	r2, [r7, #2]
 8002532:	78f9      	ldrb	r1, [r7, #3]
 8002534:	7e3b      	ldrb	r3, [r7, #24]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4603      	mov	r3, r0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff4d 	bl	80023da <u8g2_draw_hv_line_2dir>
 8002540:	e000      	b.n	8002544 <u8g2_draw_hv_line_4dir+0xa6>
    return;
 8002542:	bf00      	nop
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
#endif
}
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}

0800254a <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800254a:	b590      	push	{r4, r7, lr}
 800254c:	b085      	sub	sp, #20
 800254e:	af02      	add	r7, sp, #8
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	4608      	mov	r0, r1
 8002554:	4611      	mov	r1, r2
 8002556:	461a      	mov	r2, r3
 8002558:	4603      	mov	r3, r0
 800255a:	70fb      	strb	r3, [r7, #3]
 800255c:	460b      	mov	r3, r1
 800255e:	70bb      	strb	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <u8g2_DrawHVLine+0x36>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	685c      	ldr	r4, [r3, #4]
 8002570:	7878      	ldrb	r0, [r7, #1]
 8002572:	78ba      	ldrb	r2, [r7, #2]
 8002574:	78f9      	ldrb	r1, [r7, #3]
 8002576:	7e3b      	ldrb	r3, [r7, #24]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4603      	mov	r3, r0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	47a0      	blx	r4
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}

08002588 <u8g2_DrawPixel>:
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800259e:	78ba      	ldrb	r2, [r7, #2]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d31a      	bcc.n	80025da <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025aa:	78ba      	ldrb	r2, [r7, #2]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d216      	bcs.n	80025de <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d312      	bcc.n	80025e2 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d20e      	bcs.n	80025e6 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80025c8:	78ba      	ldrb	r2, [r7, #2]
 80025ca:	78f9      	ldrb	r1, [r7, #3]
 80025cc:	2300      	movs	r3, #0
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffb9 	bl	800254a <u8g2_DrawHVLine>
 80025d8:	e006      	b.n	80025e8 <u8g2_DrawPixel+0x60>
    return;
 80025da:	bf00      	nop
 80025dc:	e004      	b.n	80025e8 <u8g2_DrawPixel+0x60>
    return;
 80025de:	bf00      	nop
 80025e0:	e002      	b.n	80025e8 <u8g2_DrawPixel+0x60>
    return;
 80025e2:	bf00      	nop
 80025e4:	e000      	b.n	80025e8 <u8g2_DrawPixel+0x60>
    return;
 80025e6:	bf00      	nop
}
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80025ee:	b490      	push	{r4, r7}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4604      	mov	r4, r0
 80025f6:	4608      	mov	r0, r1
 80025f8:	4611      	mov	r1, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	71fb      	strb	r3, [r7, #7]
 8002600:	4603      	mov	r3, r0
 8002602:	71bb      	strb	r3, [r7, #6]
 8002604:	460b      	mov	r3, r1
 8002606:	717b      	strb	r3, [r7, #5]
 8002608:	4613      	mov	r3, r2
 800260a:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800260c:	797a      	ldrb	r2, [r7, #5]
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	429a      	cmp	r2, r3
 8002612:	d20d      	bcs.n	8002630 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002614:	793a      	ldrb	r2, [r7, #4]
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d901      	bls.n	8002620 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800261c:	2301      	movs	r3, #1
 800261e:	e014      	b.n	800264a <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002620:	797a      	ldrb	r2, [r7, #5]
 8002622:	793b      	ldrb	r3, [r7, #4]
 8002624:	429a      	cmp	r2, r3
 8002626:	d901      	bls.n	800262c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002628:	2301      	movs	r3, #1
 800262a:	e00e      	b.n	800264a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800262c:	2300      	movs	r3, #0
 800262e:	e00c      	b.n	800264a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002630:	793a      	ldrb	r2, [r7, #4]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	429a      	cmp	r2, r3
 8002636:	d907      	bls.n	8002648 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002638:	797a      	ldrb	r2, [r7, #5]
 800263a:	793b      	ldrb	r3, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d901      	bls.n	8002644 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002640:	2301      	movs	r3, #1
 8002642:	e002      	b.n	800264a <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e000      	b.n	800264a <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002648:	2300      	movs	r3, #0
    }
  }
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bc90      	pop	{r4, r7}
 8002652:	4770      	bx	lr

08002654 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	4603      	mov	r3, r0
 8002664:	70fb      	strb	r3, [r7, #3]
 8002666:	460b      	mov	r3, r1
 8002668:	70bb      	strb	r3, [r7, #2]
 800266a:	4613      	mov	r3, r2
 800266c:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 0043 	ldrb.w	r0, [r3, #67]	; 0x43
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 800267a:	7c3b      	ldrb	r3, [r7, #16]
 800267c:	78ba      	ldrb	r2, [r7, #2]
 800267e:	f7ff ffb6 	bl	80025ee <u8g2_is_intersection_decision_tree>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <u8g2_IsIntersection+0x38>
    return 0; 
 8002688:	2300      	movs	r3, #0
 800268a:	e00a      	b.n	80026a2 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 0041 	ldrb.w	r0, [r3, #65]	; 0x41
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	f7ff ffa7 	bl	80025ee <u8g2_is_intersection_decision_tree>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <u8g2_ll_hvline_horizontal_right_lsb>:
  asumption: 
    all clipping done
*/

void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b087      	sub	sp, #28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	4608      	mov	r0, r1
 80026b4:	4611      	mov	r1, r2
 80026b6:	461a      	mov	r2, r3
 80026b8:	4603      	mov	r3, r0
 80026ba:	70fb      	strb	r3, [r7, #3]
 80026bc:	460b      	mov	r3, r1
 80026be:	70bb      	strb	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  uint16_t offset;
  uint8_t *ptr;
  uint8_t bit_pos;
  uint8_t mask;
  uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	7c1b      	ldrb	r3, [r3, #16]
 80026ca:	74bb      	strb	r3, [r7, #18]

  bit_pos = x;		/* overflow truncate is ok here... */
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	747b      	strb	r3, [r7, #17]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80026d0:	7c7b      	ldrb	r3, [r7, #17]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	747b      	strb	r3, [r7, #17]
  mask = 128;
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	74fb      	strb	r3, [r7, #19]
  mask >>= bit_pos;
 80026dc:	7cfa      	ldrb	r2, [r7, #19]
 80026de:	7c7b      	ldrb	r3, [r7, #17]
 80026e0:	fa42 f303 	asr.w	r3, r2, r3
 80026e4:	74fb      	strb	r3, [r7, #19]

  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026e6:	78bb      	ldrb	r3, [r7, #2]
 80026e8:	81fb      	strh	r3, [r7, #14]
  offset *= tile_width;
 80026ea:	7cbb      	ldrb	r3, [r7, #18]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	89fa      	ldrh	r2, [r7, #14]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	81fb      	strh	r3, [r7, #14]
  offset += x>>3;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	08db      	lsrs	r3, r3, #3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	4413      	add	r3, r2
 8002702:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002708:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800270a:	89fb      	ldrh	r3, [r7, #14]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4413      	add	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d129      	bne.n	800276e <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
  {
      
    do
    {

      if ( u8g2->draw_color <= 1 )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002720:	2b01      	cmp	r3, #1
 8002722:	d806      	bhi.n	8002732 <u8g2_ll_hvline_horizontal_right_lsb+0x88>
	*ptr |= mask;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	4313      	orrs	r3, r2
 800272c:	b2da      	uxtb	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002738:	2b01      	cmp	r3, #1
 800273a:	d006      	beq.n	800274a <u8g2_ll_hvline_horizontal_right_lsb+0xa0>
	*ptr ^= mask;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	4053      	eors	r3, r2
 8002744:	b2da      	uxtb	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	701a      	strb	r2, [r3, #0]
      
      mask >>= 1;
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	74fb      	strb	r3, [r7, #19]
      if ( mask == 0 )
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <u8g2_ll_hvline_horizontal_right_lsb+0xb6>
      {
	mask = 128;
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	74fb      	strb	r3, [r7, #19]
        ptr++;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
      }
      
      //x++;
      len--;
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	3b01      	subs	r3, #1
 8002764:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 8002766:	787b      	ldrb	r3, [r7, #1]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1d6      	bne.n	800271a <u8g2_ll_hvline_horizontal_right_lsb+0x70>
      ptr += tile_width;
      //y++;
      len--;
    } while( len != 0 );
  }
}
 800276c:	e021      	b.n	80027b2 <u8g2_ll_hvline_horizontal_right_lsb+0x108>
      if ( u8g2->draw_color <= 1 )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002774:	2b01      	cmp	r3, #1
 8002776:	d806      	bhi.n	8002786 <u8g2_ll_hvline_horizontal_right_lsb+0xdc>
	*ptr |= mask;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	4313      	orrs	r3, r2
 8002780:	b2da      	uxtb	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	701a      	strb	r2, [r3, #0]
      if ( u8g2->draw_color != 1 )
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800278c:	2b01      	cmp	r3, #1
 800278e:	d006      	beq.n	800279e <u8g2_ll_hvline_horizontal_right_lsb+0xf4>
	*ptr ^= mask;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	4053      	eors	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	701a      	strb	r2, [r3, #0]
      ptr += tile_width;
 800279e:	7cbb      	ldrb	r3, [r7, #18]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
      len--;
 80027a6:	787b      	ldrb	r3, [r7, #1]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	707b      	strb	r3, [r7, #1]
    } while( len != 0 );
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1dd      	bne.n	800276e <u8g2_ll_hvline_horizontal_right_lsb+0xc4>
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	649a      	str	r2, [r3, #72]	; 0x48
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  u8g2->bitmap_transparency = 0;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  u8g2->draw_color = 1;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  u8g2->is_auto_page_clear = 1;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
  
  u8g2->cb = u8g2_cb;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update(u8g2);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	4798      	blx	r3

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff fd78 	bl	8002314 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
#endif
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002842:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	7c1b      	ldrb	r3, [r3, #16]
 8002858:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b1f      	cmp	r3, #31
 800285e:	d901      	bls.n	8002864 <u8g2_update_dimension_common+0x30>
    t = 31;
 8002860:	231f      	movs	r3, #31
 8002862:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002878:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7bfa      	ldrb	r2, [r7, #15]
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  t = u8g2->tile_buf_height;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002898:	4413      	add	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	7c52      	ldrb	r2, [r2, #17]
 80028a0:	4293      	cmp	r3, r2
 80028a2:	dd07      	ble.n	80028b4 <u8g2_update_dimension_common+0x80>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	7c5a      	ldrb	r2, [r3, #17]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->buf_y1 = u8g2->buf_y0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  u8g2->buf_y1 += t;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	4413      	add	r3, r2
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	22f0      	movs	r2, #240	; 0xf0
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	8a9b      	ldrh	r3, [r3, #20]
 80028f2:	2bf0      	cmp	r3, #240	; 0xf0
 80028f4:	d806      	bhi.n	8002904 <u8g2_update_dimension_common+0xd0>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	8a9b      	ldrh	r3, [r3, #20]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	8adb      	ldrh	r3, [r3, #22]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#endif

}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <u8g2_update_dimension_r0>:

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff85 	bl	8002834 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  u8g2->user_y0 = u8g2->buf_y0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->user_y1 = u8g2->buf_y1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af02      	add	r7, sp, #8
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	4608      	mov	r0, r1
 8002968:	4611      	mov	r1, r2
 800296a:	461a      	mov	r2, r3
 800296c:	4603      	mov	r3, r0
 800296e:	70fb      	strb	r3, [r7, #3]
 8002970:	460b      	mov	r3, r1
 8002972:	70bb      	strb	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
 8002978:	7878      	ldrb	r0, [r7, #1]
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	78f9      	ldrb	r1, [r7, #3]
 800297e:	7c3b      	ldrb	r3, [r7, #16]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4603      	mov	r3, r0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fd8a 	bl	800249e <u8g2_draw_hv_line_4dir>
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <u8x8_ascii_next+0x18>
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	2b0a      	cmp	r3, #10
 80029c2:	d102      	bne.n	80029ca <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80029c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c8:	e001      	b.n	80029ce <u8x8_ascii_next+0x22>
  return b;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	b29b      	uxth	r3, r3
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	460b      	mov	r3, r1
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691c      	ldr	r4, [r3, #16]
 80029ea:	7afa      	ldrb	r2, [r7, #11]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2117      	movs	r1, #23
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	47a0      	blx	r4
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}

080029fe <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002a0a:	1cfb      	adds	r3, r7, #3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2101      	movs	r1, #1
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ffe1 	bl	80029d8 <u8x8_byte_SendBytes>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <u8x8_byte_4wire_sw_spi>:
    U8X8_MSG_BYTE_START_TRANSFER
    U8X8_MSG_BYTE_END_TRANSFER
*/

uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b089      	sub	sp, #36	; 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	72fb      	strb	r3, [r7, #11]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	72bb      	strb	r3, [r7, #10]
  uint8_t i, b;
  uint8_t *data;
  uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	7b1b      	ldrb	r3, [r3, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t not_takeover_edge = 1 - takeover_edge;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	f1c3 0301 	rsb	r3, r3, #1
 8002a44:	75bb      	strb	r3, [r7, #22]
 
  switch(msg)
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	3b14      	subs	r3, #20
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	f200 80a4 	bhi.w	8002b98 <u8x8_byte_4wire_sw_spi+0x178>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <u8x8_byte_4wire_sw_spi+0x38>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002b1b 	.word	0x08002b1b
 8002a5c:	08002b99 	.word	0x08002b99
 8002a60:	08002b99 	.word	0x08002b99
 8002a64:	08002a8d 	.word	0x08002a8d
 8002a68:	08002b51 	.word	0x08002b51
 8002a6c:	08002b75 	.word	0x08002b75
 8002a70:	08002b99 	.word	0x08002b99
 8002a74:	08002b99 	.word	0x08002b99
 8002a78:	08002b99 	.word	0x08002b99
 8002a7c:	08002b99 	.word	0x08002b99
 8002a80:	08002b99 	.word	0x08002b99
 8002a84:	08002b99 	.word	0x08002b99
 8002a88:	08002b43 	.word	0x08002b43
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
      while( arg_int > 0 )
 8002a90:	e03f      	b.n	8002b12 <u8x8_byte_4wire_sw_spi+0xf2>
      {
	b = *data;
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	77bb      	strb	r3, [r7, #30]
	data++;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
	arg_int--;
 8002a9e:	7abb      	ldrb	r3, [r7, #10]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	72bb      	strb	r3, [r7, #10]
	for( i = 0; i < 8; i++ )
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e030      	b.n	8002b0c <u8x8_byte_4wire_sw_spi+0xec>
	{
	  if ( b & 128 )
 8002aaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da05      	bge.n	8002abe <u8x8_byte_4wire_sw_spi+0x9e>
	    u8x8_gpio_SetSPIData(u8x8, 1);
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2141      	movs	r1, #65	; 0x41
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fb1d 	bl	80030f6 <u8x8_gpio_call>
 8002abc:	e004      	b.n	8002ac8 <u8x8_byte_4wire_sw_spi+0xa8>
	  else
	    u8x8_gpio_SetSPIData(u8x8, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2141      	movs	r1, #65	; 0x41
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fb17 	bl	80030f6 <u8x8_gpio_call>
	  b <<= 1;
 8002ac8:	7fbb      	ldrb	r3, [r7, #30]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	77bb      	strb	r3, [r7, #30]
	  
	  u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 8002ace:	7dbb      	ldrb	r3, [r7, #22]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb0e 	bl	80030f6 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	799b      	ldrb	r3, [r3, #6]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fb06 	bl	80030f6 <u8x8_gpio_call>
	  u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	461a      	mov	r2, r3
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fb00 	bl	80030f6 <u8x8_gpio_call>
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	79db      	ldrb	r3, [r3, #7]
 8002afc:	461a      	mov	r2, r3
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 faf8 	bl	80030f6 <u8x8_gpio_call>
	for( i = 0; i < 8; i++ )
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
 8002b0e:	2b07      	cmp	r3, #7
 8002b10:	d9cb      	bls.n	8002aaa <u8x8_byte_4wire_sw_spi+0x8a>
      while( arg_int > 0 )
 8002b12:	7abb      	ldrb	r3, [r7, #10]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1bc      	bne.n	8002a92 <u8x8_byte_4wire_sw_spi+0x72>
	}    
      }
      break;
 8002b18:	e040      	b.n	8002b9c <u8x8_byte_4wire_sw_spi+0x17c>
      
    case U8X8_MSG_BYTE_INIT:
      /* disable chipselect */
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	461a      	mov	r2, r3
 8002b22:	2149      	movs	r1, #73	; 0x49
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fae6 	bl	80030f6 <u8x8_gpio_call>
      /* no wait required here */
      
      /* for SPI: setup correct level of the clock signal */
      u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	7b1b      	ldrb	r3, [r3, #12]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	2140      	movs	r1, #64	; 0x40
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fadb 	bl	80030f6 <u8x8_gpio_call>
      break;
 8002b40:	e02c      	b.n	8002b9c <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_SET_DC:
      u8x8_gpio_SetDC(u8x8, arg_int);
 8002b42:	7abb      	ldrb	r3, [r7, #10]
 8002b44:	461a      	mov	r2, r3
 8002b46:	214a      	movs	r1, #74	; 0x4a
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fad4 	bl	80030f6 <u8x8_gpio_call>
      break;
 8002b4e:	e025      	b.n	8002b9c <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_START_TRANSFER:
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	2149      	movs	r1, #73	; 0x49
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 facb 	bl	80030f6 <u8x8_gpio_call>
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NULL);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	695c      	ldr	r4, [r3, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	789a      	ldrb	r2, [r3, #2]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	47a0      	blx	r4
      break;
 8002b72:	e013      	b.n	8002b9c <u8x8_byte_4wire_sw_spi+0x17c>
    case U8X8_MSG_BYTE_END_TRANSFER:
      u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NULL);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	695c      	ldr	r4, [r3, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	78da      	ldrb	r2, [r3, #3]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	47a0      	blx	r4
      u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2149      	movs	r1, #73	; 0x49
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fab0 	bl	80030f6 <u8x8_gpio_call>
      break;
 8002b96:	e001      	b.n	8002b9c <u8x8_byte_4wire_sw_spi+0x17c>
    default:
      return 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <u8x8_byte_4wire_sw_spi+0x17e>
  }
  return 1;
 8002b9c:	2301      	movs	r3, #1
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop

08002ba8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68dc      	ldr	r4, [r3, #12]
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2115      	movs	r1, #21
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	47a0      	blx	r4
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd90      	pop	{r4, r7, pc}

08002bcc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68dc      	ldr	r4, [r3, #12]
 8002bde:	7afa      	ldrb	r2, [r7, #11]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2117      	movs	r1, #23
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	47a0      	blx	r4
 8002be8:	4603      	mov	r3, r0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd90      	pop	{r4, r7, pc}

08002bf2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002bf2:	b590      	push	{r4, r7, lr}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68dc      	ldr	r4, [r3, #12]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2200      	movs	r2, #0
 8002c02:	2118      	movs	r1, #24
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	47a0      	blx	r4
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}

08002c12 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c12:	b590      	push	{r4, r7, lr}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68dc      	ldr	r4, [r3, #12]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	2119      	movs	r1, #25
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	47a0      	blx	r4
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	73fb      	strb	r3, [r7, #15]
    data++;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b17      	cmp	r3, #23
 8002c4c:	d017      	beq.n	8002c7e <u8x8_cad_SendSequence+0x4c>
 8002c4e:	2b17      	cmp	r3, #23
 8002c50:	dc02      	bgt.n	8002c58 <u8x8_cad_SendSequence+0x26>
 8002c52:	2b15      	cmp	r3, #21
 8002c54:	db37      	blt.n	8002cc6 <u8x8_cad_SendSequence+0x94>
 8002c56:	e004      	b.n	8002c62 <u8x8_cad_SendSequence+0x30>
 8002c58:	2b19      	cmp	r3, #25
 8002c5a:	dd1e      	ble.n	8002c9a <u8x8_cad_SendSequence+0x68>
 8002c5c:	2bfe      	cmp	r3, #254	; 0xfe
 8002c5e:	d024      	beq.n	8002caa <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002c60:	e031      	b.n	8002cc6 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68dc      	ldr	r4, [r3, #12]
 8002c6c:	7bba      	ldrb	r2, [r7, #14]
 8002c6e:	7bf9      	ldrb	r1, [r7, #15]
 8002c70:	2300      	movs	r3, #0
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	47a0      	blx	r4
	  data++;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	603b      	str	r3, [r7, #0]
	  break;
 8002c7c:	e022      	b.n	8002cc4 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c84:	f107 030e 	add.w	r3, r7, #14
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff9d 	bl	8002bcc <u8x8_cad_SendData>
	  data++;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3301      	adds	r3, #1
 8002c96:	603b      	str	r3, [r7, #0]
	  break;
 8002c98:	e014      	b.n	8002cc4 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68dc      	ldr	r4, [r3, #12]
 8002c9e:	7bf9      	ldrb	r1, [r7, #15]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	47a0      	blx	r4
	  break;
 8002ca8:	e00c      	b.n	8002cc4 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002cb0:	7bbb      	ldrb	r3, [r7, #14]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2129      	movs	r1, #41	; 0x29
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa1d 	bl	80030f6 <u8x8_gpio_call>
	  data++;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	603b      	str	r3, [r7, #0]
	  break;
 8002cc2:	bf00      	nop
    cmd = *data;
 8002cc4:	e7ba      	b.n	8002c3c <u8x8_cad_SendSequence+0xa>
	return;
 8002cc6:	bf00      	nop
    }
  }
}
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
	...

08002cd0 <u8x8_cad_st7920_spi>:
}

/* cad procedure for the ST7920 in SPI mode */
/* u8x8_byte_SetDC is not used */
uint8_t u8x8_cad_st7920_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b089      	sub	sp, #36	; 0x24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	72fb      	strb	r3, [r7, #11]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	72bb      	strb	r3, [r7, #10]
  uint8_t b;
  uint8_t i;
  static uint8_t buf[16];
  uint8_t *ptr;
  
  switch(msg)
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	3b14      	subs	r3, #20
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	f200 80a8 	bhi.w	8002e3c <u8x8_cad_st7920_spi+0x16c>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <u8x8_cad_st7920_spi+0x24>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002e2b 	.word	0x08002e2b
 8002cf8:	08002d0d 	.word	0x08002d0d
 8002cfc:	08002d53 	.word	0x08002d53
 8002d00:	08002d7b 	.word	0x08002d7b
 8002d04:	08002e2b 	.word	0x08002e2b
 8002d08:	08002e2b 	.word	0x08002e2b
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002d0c:	21f8      	movs	r1, #248	; 0xf8
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fe75 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d14:	2201      	movs	r2, #1
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f9ec 	bl	80030f6 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002d1e:	7abb      	ldrb	r3, [r7, #10]
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fe68 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f9df 	bl	80030f6 <u8x8_gpio_call>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002d38:	7abb      	ldrb	r3, [r7, #10]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	4619      	mov	r1, r3
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fe5c 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d46:	2201      	movs	r2, #1
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f9d3 	bl	80030f6 <u8x8_gpio_call>
      break;
 8002d50:	e076      	b.n	8002e40 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
 8002d52:	21f8      	movs	r1, #248	; 0xf8
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fe52 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
 8002d5a:	7abb      	ldrb	r3, [r7, #10]
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fe4a 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int << 4);
 8002d6a:	7abb      	ldrb	r3, [r7, #10]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	4619      	mov	r1, r3
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff fe43 	bl	80029fe <u8x8_byte_SendByte>
      break;
 8002d78:	e062      	b.n	8002e40 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_SEND_DATA:
    
      u8x8_byte_SendByte(u8x8, 0x0fa);
 8002d7a:	21fa      	movs	r1, #250	; 0xfa
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fe3e 	bl	80029fe <u8x8_byte_SendByte>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002d82:	2201      	movs	r2, #1
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f9b5 	bl	80030f6 <u8x8_gpio_call>

      /* this loop should be optimized: multiple bytes should be sent */
      /* u8x8_byte_SendBytes(u8x8, arg_int, arg_ptr); */
      data = (uint8_t *)arg_ptr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	61fb      	str	r3, [r7, #28]
    
      /* the following loop increases speed by 20% */
      while( arg_int >= 8 )
 8002d90:	e026      	b.n	8002de0 <u8x8_cad_st7920_spi+0x110>
      {
	i = 8;
 8002d92:	2308      	movs	r3, #8
 8002d94:	76fb      	strb	r3, [r7, #27]
	ptr = buf;
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <u8x8_cad_st7920_spi+0x17c>)
 8002d98:	617b      	str	r3, [r7, #20]
	do
	{
	  b = *data++;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	61fa      	str	r2, [r7, #28]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b & 0x0f0;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	617a      	str	r2, [r7, #20]
 8002daa:	7cfa      	ldrb	r2, [r7, #19]
 8002dac:	f022 020f 	bic.w	r2, r2, #15
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
	  b <<= 4;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	74fb      	strb	r3, [r7, #19]
	  *ptr++= b;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	617a      	str	r2, [r7, #20]
 8002dc0:	7cfa      	ldrb	r2, [r7, #19]
 8002dc2:	701a      	strb	r2, [r3, #0]
	  i--;
 8002dc4:	7efb      	ldrb	r3, [r7, #27]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	76fb      	strb	r3, [r7, #27]
	} while( i > 0 );
 8002dca:	7efb      	ldrb	r3, [r7, #27]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e4      	bne.n	8002d9a <u8x8_cad_st7920_spi+0xca>
	arg_int -= 8;
 8002dd0:	7abb      	ldrb	r3, [r7, #10]
 8002dd2:	3b08      	subs	r3, #8
 8002dd4:	72bb      	strb	r3, [r7, #10]
	u8x8_byte_SendBytes(u8x8, 16, buf); 
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	; (8002e4c <u8x8_cad_st7920_spi+0x17c>)
 8002dd8:	2110      	movs	r1, #16
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fdfc 	bl	80029d8 <u8x8_byte_SendBytes>
      while( arg_int >= 8 )
 8002de0:	7abb      	ldrb	r3, [r7, #10]
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d8d5      	bhi.n	8002d92 <u8x8_cad_st7920_spi+0xc2>
      }
      
    
      while( arg_int > 0 )
 8002de6:	e017      	b.n	8002e18 <u8x8_cad_st7920_spi+0x148>
      {
	b = *data;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	74fb      	strb	r3, [r7, #19]
	u8x8_byte_SendByte(u8x8, b & 0x0f0);
 8002dee:	7cfb      	ldrb	r3, [r7, #19]
 8002df0:	f023 030f 	bic.w	r3, r3, #15
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fe00 	bl	80029fe <u8x8_byte_SendByte>
	u8x8_byte_SendByte(u8x8, b << 4);
 8002dfe:	7cfb      	ldrb	r3, [r7, #19]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4619      	mov	r1, r3
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fdf9 	bl	80029fe <u8x8_byte_SendByte>
	data++;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
	arg_int--;
 8002e12:	7abb      	ldrb	r3, [r7, #10]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	72bb      	strb	r3, [r7, #10]
      while( arg_int > 0 )
 8002e18:	7abb      	ldrb	r3, [r7, #10]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e4      	bne.n	8002de8 <u8x8_cad_st7920_spi+0x118>
      }
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 1);
 8002e1e:	2201      	movs	r2, #1
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f967 	bl	80030f6 <u8x8_gpio_call>
      break;
 8002e28:	e00a      	b.n	8002e40 <u8x8_cad_st7920_spi+0x170>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	691c      	ldr	r4, [r3, #16]
 8002e2e:	7aba      	ldrb	r2, [r7, #10]
 8002e30:	7af9      	ldrb	r1, [r7, #11]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	47a0      	blx	r4
 8002e38:	4603      	mov	r3, r0
 8002e3a:	e002      	b.n	8002e42 <u8x8_cad_st7920_spi+0x172>
    default:
      return 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <u8x8_cad_st7920_spi+0x172>
  }
  return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200004a8 	.word	0x200004a8

08002e50 <u8x8_d_st7920_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	72fb      	strb	r3, [r7, #11]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c, i;
  uint8_t *ptr;
  switch(msg)
 8002e62:	7afb      	ldrb	r3, [r7, #11]
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	d00b      	beq.n	8002e80 <u8x8_d_st7920_common+0x30>
 8002e68:	2b0f      	cmp	r3, #15
 8002e6a:	d016      	beq.n	8002e9a <u8x8_d_st7920_common+0x4a>
 8002e6c:	2b0a      	cmp	r3, #10
 8002e6e:	d165      	bne.n	8002f3c <u8x8_d_st7920_common+0xec>
    /*
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f8a3 	bl	8002fbc <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
 8002e76:	4935      	ldr	r1, [pc, #212]	; (8002f4c <u8x8_d_st7920_common+0xfc>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff feda 	bl	8002c32 <u8x8_cad_SendSequence>
      break;
 8002e7e:	e05f      	b.n	8002f40 <u8x8_d_st7920_common+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002e80:	7abb      	ldrb	r3, [r7, #10]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <u8x8_d_st7920_common+0x40>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
 8002e86:	4932      	ldr	r1, [pc, #200]	; (8002f50 <u8x8_d_st7920_common+0x100>)
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fed2 	bl	8002c32 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
      break;
 8002e8e:	e057      	b.n	8002f40 <u8x8_d_st7920_common+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
 8002e90:	4930      	ldr	r1, [pc, #192]	; (8002f54 <u8x8_d_st7920_common+0x104>)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff fecd 	bl	8002c32 <u8x8_cad_SendSequence>
      break;
 8002e98:	e052      	b.n	8002f40 <u8x8_d_st7920_common+0xf0>
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	77bb      	strb	r3, [r7, #30]
      y*=8;
 8002ea0:	7fbb      	ldrb	r3, [r7, #30]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	77bb      	strb	r3, [r7, #30]
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	795b      	ldrb	r3, [r3, #5]
 8002eaa:	77fb      	strb	r3, [r7, #31]
      x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only every second tile */
 8002eac:	7ffb      	ldrb	r3, [r7, #31]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]
    
      if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 8002eb2:	7fbb      	ldrb	r3, [r7, #30]
 8002eb4:	2b1f      	cmp	r3, #31
 8002eb6:	d905      	bls.n	8002ec4 <u8x8_d_st7920_common+0x74>
      {
	y-=32;
 8002eb8:	7fbb      	ldrb	r3, [r7, #30]
 8002eba:	3b20      	subs	r3, #32
 8002ebc:	77bb      	strb	r3, [r7, #30]
	x+=8;
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	77fb      	strb	r3, [r7, #31]
      }
    
      u8x8_cad_StartTransfer(u8x8);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fe94 	bl	8002bf2 <u8x8_cad_StartTransfer>
	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
	
	TODO: Consider arg_int, however arg_int is not used by u8g2
      */
      c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	75fb      	strb	r3, [r7, #23]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
      /* The following byte is sent to allow the ST7920 to sync up with the data */
      /* it solves some issues with garbage data */
      u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 8002ed6:	213e      	movs	r1, #62	; 0x3e
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fe65 	bl	8002ba8 <u8x8_cad_SendCmd>
      for( i = 0; i < 8; i++ )
 8002ede:	2300      	movs	r3, #0
 8002ee0:	777b      	strb	r3, [r7, #29]
 8002ee2:	e024      	b.n	8002f2e <u8x8_d_st7920_common+0xde>
      {
	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 8002ee4:	7fba      	ldrb	r2, [r7, #30]
 8002ee6:	7f7b      	ldrb	r3, [r7, #29]
 8002ee8:	4413      	add	r3, r2
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	b25b      	sxtb	r3, r3
 8002eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff fe55 	bl	8002ba8 <u8x8_cad_SendCmd>
	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 8002efe:	7ffb      	ldrb	r3, [r7, #31]
 8002f00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f7ff fe4d 	bl	8002ba8 <u8x8_cad_SendCmd>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	791b      	ldrb	r3, [r3, #4]
 8002f12:	75fb      	strb	r3, [r7, #23]

	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one line of data */
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fe56 	bl	8002bcc <u8x8_cad_SendData>
	ptr += c;
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4413      	add	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      for( i = 0; i < 8; i++ )
 8002f28:	7f7b      	ldrb	r3, [r7, #29]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	777b      	strb	r3, [r7, #29]
 8002f2e:	7f7b      	ldrb	r3, [r7, #29]
 8002f30:	2b07      	cmp	r3, #7
 8002f32:	d9d7      	bls.n	8002ee4 <u8x8_d_st7920_common+0x94>
	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
      }

      u8x8_cad_EndTransfer(u8x8);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff fe6c 	bl	8002c12 <u8x8_cad_EndTransfer>

      break;
 8002f3a:	e001      	b.n	8002f40 <u8x8_d_st7920_common+0xf0>
    default:
      return 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <u8x8_d_st7920_common+0xf2>
  }
  return 1;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	08003280 	.word	0x08003280
 8002f50:	08003294 	.word	0x08003294
 8002f54:	0800329c 	.word	0x0800329c

08002f58 <u8x8_d_st7920_128x64>:
  }
  return 1;
}

uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	72fb      	strb	r3, [r7, #11]
 8002f66:	4613      	mov	r3, r2
 8002f68:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f6a:	7afb      	ldrb	r3, [r7, #11]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d106      	bne.n	8002f7e <u8x8_d_st7920_128x64+0x26>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 8002f70:	4908      	ldr	r1, [pc, #32]	; (8002f94 <u8x8_d_st7920_128x64+0x3c>)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f810 	bl	8002f98 <u8x8_d_helper_display_setup_memory>
      break;
 8002f78:	bf00      	nop
    default:
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
  }
  return 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e006      	b.n	8002f8c <u8x8_d_st7920_128x64+0x34>
      return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 8002f7e:	7aba      	ldrb	r2, [r7, #10]
 8002f80:	7af9      	ldrb	r1, [r7, #11]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ff63 	bl	8002e50 <u8x8_d_st7920_common>
 8002f8a:	4603      	mov	r3, r0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	080032a4 	.word	0x080032a4

08002f98 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	7c9a      	ldrb	r2, [r3, #18]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	779a      	strb	r2, [r3, #30]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695c      	ldr	r4, [r3, #20]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2128      	movs	r1, #40	; 0x28
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68dc      	ldr	r4, [r3, #12]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2114      	movs	r1, #20
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	214b      	movs	r1, #75	; 0x4b
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f886 	bl	80030f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	791b      	ldrb	r3, [r3, #4]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2129      	movs	r1, #41	; 0x29
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f87e 	bl	80030f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	214b      	movs	r1, #75	; 0x4b
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f879 	bl	80030f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	2129      	movs	r1, #41	; 0x29
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f871 	bl	80030f6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003014:	2201      	movs	r2, #1
 8003016:	214b      	movs	r1, #75	; 0x4b
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f86c 	bl	80030f6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	795b      	ldrb	r3, [r3, #5]
 8003024:	461a      	mov	r2, r3
 8003026:	2129      	movs	r1, #41	; 0x29
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f864 	bl	80030f6 <u8x8_gpio_call>
}    
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003036:	b590      	push	{r4, r7, lr}
 8003038:	b085      	sub	sp, #20
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	4608      	mov	r0, r1
 8003040:	4611      	mov	r1, r2
 8003042:	461a      	mov	r2, r3
 8003044:	4603      	mov	r3, r0
 8003046:	70fb      	strb	r3, [r7, #3]
 8003048:	460b      	mov	r3, r1
 800304a:	70bb      	strb	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003054:	78bb      	ldrb	r3, [r7, #2]
 8003056:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689c      	ldr	r4, [r3, #8]
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	2201      	movs	r2, #1
 800306a:	210f      	movs	r1, #15
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	47a0      	blx	r4
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bd90      	pop	{r4, r7, pc}

0800307a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689c      	ldr	r4, [r3, #8]
 8003086:	2300      	movs	r3, #0
 8003088:	2200      	movs	r2, #0
 800308a:	2109      	movs	r1, #9
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	47a0      	blx	r4
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689c      	ldr	r4, [r3, #8]
 80030a4:	2300      	movs	r3, #0
 80030a6:	2200      	movs	r2, #0
 80030a8:	210a      	movs	r1, #10
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	47a0      	blx	r4
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}

080030b6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80030b6:	b590      	push	{r4, r7, lr}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689c      	ldr	r4, [r3, #8]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	2300      	movs	r3, #0
 80030ca:	210b      	movs	r1, #11
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	47a0      	blx	r4
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689c      	ldr	r4, [r3, #8]
 80030e4:	2300      	movs	r3, #0
 80030e6:	2200      	movs	r2, #0
 80030e8:	2110      	movs	r1, #16
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	47a0      	blx	r4
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}

080030f6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80030f6:	b590      	push	{r4, r7, lr}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
 8003102:	4613      	mov	r3, r2
 8003104:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695c      	ldr	r4, [r3, #20]
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	78f9      	ldrb	r1, [r7, #3]
 800310e:	2300      	movs	r3, #0
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	47a0      	blx	r4
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}

0800311c <u8x8_dummy_cb>:


#include "u8x8.h"

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	460b      	mov	r3, r1
 8003128:	72fb      	strb	r3, [r7, #11]
 800312a:	4613      	mov	r3, r2
 800312c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <u8x8_SetupDefaults+0x58>)
 800314e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <u8x8_SetupDefaults+0x58>)
 8003154:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <u8x8_SetupDefaults+0x58>)
 800315a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <u8x8_SetupDefaults+0x58>)
 8003160:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	77da      	strb	r2, [r3, #31]
    u8x8->device_address = 0;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->i2c_address = 255;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	f883 2020 	strb.w	r2, [r3, #32]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	0800311d 	.word	0x0800311d

08003198 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff ffc8 	bl	800313c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff ff58 	bl	800307a <u8x8_SetupMemory>
}
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <__libc_init_array>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	2500      	movs	r5, #0
 80031d8:	4e0c      	ldr	r6, [pc, #48]	; (800320c <__libc_init_array+0x38>)
 80031da:	4c0d      	ldr	r4, [pc, #52]	; (8003210 <__libc_init_array+0x3c>)
 80031dc:	1ba4      	subs	r4, r4, r6
 80031de:	10a4      	asrs	r4, r4, #2
 80031e0:	42a5      	cmp	r5, r4
 80031e2:	d109      	bne.n	80031f8 <__libc_init_array+0x24>
 80031e4:	f000 f822 	bl	800322c <_init>
 80031e8:	2500      	movs	r5, #0
 80031ea:	4e0a      	ldr	r6, [pc, #40]	; (8003214 <__libc_init_array+0x40>)
 80031ec:	4c0a      	ldr	r4, [pc, #40]	; (8003218 <__libc_init_array+0x44>)
 80031ee:	1ba4      	subs	r4, r4, r6
 80031f0:	10a4      	asrs	r4, r4, #2
 80031f2:	42a5      	cmp	r5, r4
 80031f4:	d105      	bne.n	8003202 <__libc_init_array+0x2e>
 80031f6:	bd70      	pop	{r4, r5, r6, pc}
 80031f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031fc:	4798      	blx	r3
 80031fe:	3501      	adds	r5, #1
 8003200:	e7ee      	b.n	80031e0 <__libc_init_array+0xc>
 8003202:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003206:	4798      	blx	r3
 8003208:	3501      	adds	r5, #1
 800320a:	e7f2      	b.n	80031f2 <__libc_init_array+0x1e>
 800320c:	08003b0c 	.word	0x08003b0c
 8003210:	08003b0c 	.word	0x08003b0c
 8003214:	08003b0c 	.word	0x08003b0c
 8003218:	08003b10 	.word	0x08003b10

0800321c <memset>:
 800321c:	4603      	mov	r3, r0
 800321e:	4402      	add	r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
